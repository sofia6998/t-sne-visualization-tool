{"version":3,"sources":["components/pages/UploadCsvPage.module.scss","components/SettingsOverlayModule.module.scss","components/Layout.module.scss","scatterPlot/plotHelpers.ts","scatterPlot/PlotBuilder.ts","preprocessing/dropDefaultColumns.ts","runTsne.worker.ts","contexts/PlotContext.tsx","preprocessing/getOriginalDf.ts","preprocessing/parseCorrectTypes.ts","preprocessing/dropEmptyColumns.ts","preprocessing/encodeStringValues.ts","preprocessing/dfToArray.ts","scatterPlot/ScatterPlot.tsx","helpers/throttle.ts","components/Layout.tsx","components/icons/SettingsIcon.tsx","helpers/classNames.ts","components/common/BlankButton.tsx","components/Slider.tsx","components/SettingsOverlayModule.tsx","components/pages/TsneGraphView.tsx","components/pages/UploadCsvPage.tsx","components/pages/Router.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/common/BlankButton.module.scss","components/Slider.module.scss"],"names":["module","exports","colorGenerator","deg","step","getColorByHue","hue","ColorManager","gen","map","this","value","next","StyleManager","colorManager","styleSettings","setSettings","reset","getPointRadius","d","sizeField","getPointText","nameField","getPointColor","colorField","getColor","getPointOpacity","opacity","DOT_CLASS","defaultMargin","top","left","bottom","right","PlotBuilder","styleM","svg","mainG","xScale","d3","yScale","lineFunction","margin","height","width","ref","options","current","append","style","background","attr","setupZooming","zoom","on","e","transform","Math","sqrt","k","selectAll","call","xRange","yRange","domain","range","x","y","curve","selector","remove","data","gDots","enter","X","Y","text","DEFAULT_COLUMNS_TO_DROP","Worker_fn","Worker","PreprocessingStatus","PREPROCESSING_PIPELINE","func","df","statusToChange","PARSING_TYPES","columnNames","getColumnNames","jsonDf","JSON","parse","toJSON","jsonDfWithParsedTypes","forEach","row","parsedRow","cName","parsedValue","parseFloat","isNaN","push","fromJSON","stringify","REMOVING_DEFAULT_COLUMNS","dropSeries","REMOVING_EMPTY_COLUMNS","emptyColumnNames","every","undefined","ENCODING_STRING_VALUES","dfTypes","detectTypes","modifiedDf","encoder","jsmlt","LabelEncoder","Type","columnArray","getSeries","Column","toArray","encodedColumn","Series","encode","withSeries","COMPLETED","PlotContext","React","createContext","usePlotContext","useContext","PlotContextContainer","props","funcs","tsneWorker","TsneWorker","setStyleSettings","setState","setCsvFile","file","csvFile","fileToDataFrame","setTsneParams","newTsneParams","tsneParams","terminate","initTsneWorker","runTsneSteps","a","state","csvFileText","console","log","fromCSV","originalDf","originalDfJson","preprocessDataFrame","preprocessedDf","index","cbFunc","length","preprocessingState","status","dfData","Object","values","xData","Array","from","keys","postMessage","params","NOT_PARSED","epsilon","perplexity","numSteps","costThreshold","tsneStepResult","currentStep","currentCost","points","onmessage","event","stepResult","onTsneStepCompleted","result","Provider","children","Component","defaultOptions","ScatterPlot","svgRef","useRef","useState","setData","useEffect","timeFrame","lastTime","Date","getTime","now","throttle","pointsWithCarInfo","point","rowId","xCoord","yCoord","carInfo","filter","f","updateCarData","init","updateScales","updateDots","Layout","className","styles","container","SettinsIcon","xmlns","fill","classNames","cls","v","join","BlankButton","link","onClick","title","disabled","restProps","href","button","Slider","defaultValue","max","min","onChange","ReactSlider","slider","thumbClassName","thumb","trackClassName","track","renderThumb","valueNow","TSneParams","setEpsilon","setPerplexity","setNumSteps","setCostThreshold","filterTitle","paramsGrid","paramTitle","refitButton","SettingsOverlayModule","open","setOpen","o","settingsContainer","opened","TsneGraphView","UploadCsvPage","fileInputRef","type","hidden","accept","target","files","csvButton","click","UPLOAD_CSV","GRAPH_VIEW","Router","PagePicker","navigate","useNavigate","location","useLocation","pathname","includes","path","element","to","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1acc2943.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"UploadCsvPage_container__2Kou4\",\"csvButton\":\"UploadCsvPage_csvButton__2AVTe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingsContainer\":\"SettingsOverlayModule_settingsContainer__1hhXP\",\"opened\":\"SettingsOverlayModule_opened__1pMgn\",\"button\":\"SettingsOverlayModule_button__2cMtM\",\"filterTitle\":\"SettingsOverlayModule_filterTitle__1C_sZ\",\"paramsGrid\":\"SettingsOverlayModule_paramsGrid__3BSBK\",\"paramTitle\":\"SettingsOverlayModule_paramTitle__Pmotw\",\"refitButton\":\"SettingsOverlayModule_refitButton__1NTO7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Layout_container__2g3W4\"};","import * as d3 from \"d3\";\nimport { ScaleLinear } from \"d3-scale\";\nimport { Line } from \"d3\";\nimport {DataRow} from \"./ScatterPlot\";\nimport {StyleSettings} from \"../helpers/types\";\n\nexport const DEFAULT_FRAME: Frame = {\n    margin: {top: 10, right: 30, bottom: 30, left: 60},\n    width: 460 - 60 - 30,\n    height: 400 - 10 - 30\n}\n\nexport type Frame = {\n    width: number;\n    height: number;\n    margin: {top: number, right: number, bottom: number, left: number},\n}\n\nexport default function formatDataToDots(data: Array<DataRow>): Array<[number, number]> {\n    return data.map(d => [d.X, d.Y]);\n}\n\nexport function scaledLine(\n    xScale: ScaleLinear<any, any>,\n    yScale: ScaleLinear<any, any>\n): Line<any> {\n    return d3\n        .line()\n        .x((d) => xScale(d[0]))\n        .y((d) => yScale(d[1]))\n        .curve(d3.curveMonotoneX);\n}\n\nexport function* colorGenerator(): Generator<string, string, boolean> {\n    let deg = 0;\n    let step = 360;\n    yield getColorByHue(deg);\n    while (true) {\n        deg+=step;\n        if (deg >= 360) {\n            step = step / 2;\n            deg = step / 2;\n        }\n        yield getColorByHue(deg);\n    }\n}\n\nexport function getColorByHue(hue: number): string {\n    return `hsl(${hue}, 70%, 60%)`;\n}\n\nexport function getRandomColor(): string {\n    return `hsl(${Math.floor(Math.random() * 360)}, 70%, 60%)`;\n}\n\nexport class ColorManager {\n    private gen: Generator<string, string, boolean>;\n    private map: {[key: string | number]: string};\n    constructor() {\n        this.gen = colorGenerator();\n        this.map = {};\n    }\n\n    getColor(value: string | number) {\n        if (!this.map[value]) {\n            this.map[value] = this.gen.next().value;\n        }\n\n        return this.map[value];\n    }\n\n    reset() {\n        this.map = {};\n    }\n}\n\nexport class StyleManager {\n    private colorManager = new ColorManager();\n    private styleSettings: StyleSettings = {};\n    constructor() {\n        this.styleSettings = {};\n    }\n\n    setSettings = (styleSettings: StyleSettings) => {\n        this.styleSettings = styleSettings || {};\n        this.colorManager.reset();\n    }\n\n    getPointRadius = (d: any) => {\n        const {sizeField} = this.styleSettings;\n        // @ts-ignore\n        return (d[sizeField] || 1.51);\n    }\n\n    getPointText = (d: any) => {\n        const {nameField} = this.styleSettings;\n        // @ts-ignore\n        return d[nameField];\n    }\n\n    getPointColor = (d: any) => {\n        const {colorField} = this.styleSettings;\n        // @ts-ignore\n        return this.colorManager.getColor(d[colorField]);\n    }\n\n    getPointOpacity = (d: any) => {\n        const {opacity} = this.styleSettings;\n        // @ts-ignore\n        return opacity || 1;\n    }\n\n    reset = () => {\n        this.colorManager.reset();\n    }\n\n\n}\n","import { RefObject } from \"react\";\nimport { Selection } from \"d3\";\nimport * as d3 from \"d3\";\nimport {DataRow} from \"./ScatterPlot\";\nimport {scaledLine, StyleManager} from \"./plotHelpers\";\n\n\nconst DOT_CLASS = \"dot\";\ntype Options = {\n    width: number;\n    height: number;\n    background?: string;\n    stroke?: string;\n    margin?: { top: number; left: number; bottom: number; right: number };\n};\n\nconst defaultMargin = { top: 0, left: 0, bottom: 0, right: 0 };\n\nexport default class PlotBuilder {\n    styleM = new StyleManager();\n    private svg: Selection<Element, any, HTMLElement, any> | undefined;\n    private mainG: Selection<SVGGElement, any, HTMLElement, any> | undefined;\n    private xScale = d3.scaleLinear();\n    private yScale = d3.scaleLinear();\n    private lineFunction = d3.line();\n    private margin = defaultMargin;\n    private height = 0;\n    private width = 0;\n\n    init(ref: RefObject<any>, options: Options): void {\n        this.svg = d3.select<Element, any>(ref.current);\n        this.mainG = this.svg.append('g');\n        this.svg.style(\"background\", options.background || \"transparent\");\n        this.svg.attr(\"height\", \"auto\");\n        this.svg.attr(\"width\", \"100%\");\n        this.svg.attr(\"viewBox\", `0 0 ${options.width} ${options.height}`);\n        this.margin = options.margin || defaultMargin;\n        this.width = options.width - this.margin.left - this.margin.right;\n        this.height = options.height - this.margin.top - this.margin.bottom;\n\n        this.setupZooming();\n    }\n\n    setupZooming() {\n        const zoom = d3.zoom().on(\"zoom\", e => {\n            d3.select('svg g').attr(\"transform\", (e.transform));\n            this.svg?.style(\"stroke-width\", 3 / Math.sqrt(e.transform.k));\n            this.svg?.selectAll(\"circle\").attr(\"r\", (d) => this.styleM.getPointRadius(d) / Math.sqrt(e.transform.k));\n            this.svg?.selectAll(`.${DOT_CLASS} text`).style(\"font-size\", 5 / Math.sqrt(e.transform.k));\n        });\n\n        this.svg?.call(zoom);\n    }\n\n    updateScales(xRange: [number, number], yRange: [number, number]): void {\n        this.xScale = d3\n            .scaleLinear()\n            .domain([xRange[0], xRange[1]])\n            .range([this.margin.left, this.width]);\n        this.yScale = d3\n            .scaleLinear()\n            .domain([yRange[0], yRange[1]])\n            .range([this.height, this.margin.bottom]);\n        this.lineFunction = scaledLine(this.xScale, this.yScale);\n    }\n\n    remove(selector: string): void {\n        this.svg?.selectAll(selector).remove();\n    }\n\n    updateDots(\n        data: Array<DataRow>,\n    ): void {\n        this.remove(\".\" + DOT_CLASS);\n        const gDots = this.mainG?.selectAll(DOT_CLASS)\n            .data(data)\n            .enter()\n            .append('g')\n            .attr(\"class\", DOT_CLASS);\n        gDots?.append(\"circle\")\n            .attr(\"cx\", (d) => {\n                return this.xScale(d.X) } )\n            .attr(\"cy\", (d) => { return this.yScale(d.Y) } )\n            .attr(\"r\", this.styleM.getPointRadius)\n            .style(\"opacity\", this.styleM.getPointOpacity)\n            .style(\"fill\", this.styleM.getPointColor);\n        gDots?.append(\"text\").text(this.styleM.getPointText)\n            .style(\"color\", \"#69b3a2\")\n            .style(\"font-weight\", \"100\")\n            .style(\"font-size\", \"10px\")\n            .attr(\"x\", (d) => {\n            return this.xScale(d.X) } )\n            .attr(\"y\", (d) => { return this.yScale(d.Y) } );\n    }\n\n    setUpAxis(): void {\n        if (!this.mainG) {\n            return;\n        }\n        const xAxis = this.mainG\n            .append(\"g\")\n            .attr(\"transform\", \"translate(0,\" + this.height + \")\")\n            .attr(\"class\", \"axis axis--x\")\n            .call(d3.axisBottom(this.xScale))\n            .style(\"color\", \"transparent\");\n\n        xAxis.selectAll(\"text\").style(\"fill\", \"#59536B\");\n\n        const yAxis = this.mainG\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + this.margin.left + \", 0)\")\n            .attr(\"class\", \"axis axis--y\")\n            .call(d3.axisLeft(this.yScale))\n            .style(\"color\", \"transparent\");\n\n        yAxis.selectAll(\"text\").style(\"fill\", \"#59536B\");\n    }\n}\n","import { IDataFrame, IFieldRecord } from \"data-forge\";\n\nconst DEFAULT_COLUMNS_TO_DROP: string[] = [\"id\"];\n\nexport function dropDefaultColumns(df: IDataFrame<number, IFieldRecord>): IDataFrame<number, IFieldRecord> {\n\treturn df.dropSeries(DEFAULT_COLUMNS_TO_DROP);\n}","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/runTsne.worker.6c3fcb0a.worker.js\");\n}\n","import React, { useContext } from \"react\";\nimport { DataFrame, fromCSV, IDataFrame, IFieldRecord } from \"data-forge\";\nimport {\n  getOriginalDf,\n  parseCorrectTypes,\n  dropDefaultColumns,\n  dropEmptyColumns,\n  encodeStringValues,\n  dfToArray,\n} from \"../preprocessing\";\nimport {\n  ITsneParams,\n  IDataRow,\n  ITsneStepResult,\n} from \"../tsneWrapper/TsneWrapper\";\nimport { StyleSettings } from \"../helpers/types\";\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport TsneWorker from 'worker-loader!../runTsne.worker';\n\nexport enum PreprocessingStatus {\n  NOT_PARSED,\n  PARSING_TYPES,\n  REMOVING_DEFAULT_COLUMNS,\n  REMOVING_EMPTY_COLUMNS,\n  ENCODING_STRING_VALUES,\n  COMPLETED,\n}\n\nexport interface PreprocessingState {\n  status: PreprocessingStatus,\n  preprocessedDf: IDataFrame<number, IFieldRecord> | null,\n}\n\ninterface PreprocessingStep {\n  func: (df: IDataFrame<number, IFieldRecord>) => IDataFrame<number, IFieldRecord>,\n  statusToChange: PreprocessingStatus,\n}\n\ninterface PlotState {\n  csvFile: File | null;\n  originalDf: IDataFrame<number, IFieldRecord> | null,\n  originalDfJson: any[] | null,\n  preprocessingState: PreprocessingState,\n  tsneParams: ITsneParams,\n  tsneStepResult: ITsneStepResult,\n  styleSettings: StyleSettings,\n}\n\ninterface PlotFuncs {\n  setCsvFile: (file: File | null) => void;\n  setStyleSettings: (style: StyleSettings) => void;\n  setTsneParams: (newTsneParams: ITsneParams) => void;\n}\n\ntype IPlotContext = PlotState & PlotFuncs;\n\nconst PREPROCESSING_PIPELINE: PreprocessingStep[] = [\n  { func: getOriginalDf, statusToChange: PreprocessingStatus.PARSING_TYPES },\n  { func: parseCorrectTypes, statusToChange: PreprocessingStatus.REMOVING_DEFAULT_COLUMNS },\n  { func: dropDefaultColumns, statusToChange: PreprocessingStatus.REMOVING_EMPTY_COLUMNS },\n  { func: dropEmptyColumns, statusToChange: PreprocessingStatus.ENCODING_STRING_VALUES },\n  { func: encodeStringValues, statusToChange: PreprocessingStatus.COMPLETED },\n];\n\nconst PlotContext = React.createContext<IPlotContext | any>(null);\nexport const usePlotContext = (): IPlotContext =>\n  useContext<IPlotContext>(PlotContext);\n\nexport default class PlotContextContainer extends React.Component<\n  any,\n  PlotState\n> {\n  private readonly funcs: PlotFuncs;\n  private tsneWorker: TsneWorker = new TsneWorker();\n\n  constructor(props: Readonly<{}>) {\n    super(props);\n\n    this.state = {\n      csvFile: null,\n      originalDf: null,\n      originalDfJson: null,\n      preprocessingState: {\n        status: PreprocessingStatus.NOT_PARSED,\n        preprocessedDf: null,\n      },\n      // TODO: get params from frontend\n      tsneParams: {\n        epsilon: 10,\n        perplexity: 30,\n        numSteps: 10000,\n        costThreshold: 11,\n      },\n      tsneStepResult: {\n        currentStep: 0,\n        currentCost: 0,\n        points: [],\n      },\n      styleSettings: {},\n    };\n\n    this.funcs = {\n      setCsvFile: this.setCsvFile,\n      setStyleSettings: this.setStyleSettings,\n      setTsneParams: this.setTsneParams,\n    };\n  }\n\n  componentDidMount() {\n    this.initTsneWorker();\n  }\n\n  initTsneWorker() {\n    const onTsneStepCompleted = (stepResult: ITsneStepResult): void => {\n      this.setState({ tsneStepResult: stepResult });\n    }\n    \n    this.tsneWorker.onmessage = function (event: MessageEvent<any>) {\n      const stepResult = event.data.result as ITsneStepResult;\n      onTsneStepCompleted(stepResult);\n    }\n  }\n\n  setStyleSettings = (styleSettings: StyleSettings) => {\n    this.setState({ styleSettings });\n  }\n\n  setCsvFile = (file: File | null) => {\n    this.setState({ csvFile: file }, this.fileToDataFrame);\n  }\n\n  setTsneParams = (newTsneParams: ITsneParams): void => {\n    this.setState(\n      { tsneParams: newTsneParams },\n      () => {\n        this.tsneWorker.terminate();\n\n        this.tsneWorker = new TsneWorker();\n        this.initTsneWorker();\n        this.runTsneSteps();\n      }\n    );\n  }\n\n  fileToDataFrame = async (): Promise<void> => {\n    if (this.state.csvFile === null) {\n      return;\n    }\n\n    const csvFileText: string | undefined = await this.state.csvFile?.text();\n    if (csvFileText === undefined) {\n      console.log('Error: No text from CSV file');\n      return;\n    }\n\n    const df: DataFrame<number, any> = fromCSV(csvFileText);\n\n    this.setState(\n      {\n        originalDf: df,\n        originalDfJson: df.toArray()\n      },\n      this.preprocessDataFrame\n    );\n  }\n\n  preprocessDataFrame = (): void => {\n    if (this.state.originalDf === null) {\n      return;\n    }\n\n    const { originalDf } = this.state;\n    let preprocessedDf: IDataFrame<number, IFieldRecord> = originalDf;\n    PREPROCESSING_PIPELINE.forEach((step: PreprocessingStep, index: number) => {\n      const { func, statusToChange } = step;\n\n      preprocessedDf = func(preprocessedDf);\n\n      const cbFunc = (index === PREPROCESSING_PIPELINE.length - 1)\n        ? this.runTsneSteps\n        : () => {};\n\n      this.setState(\n        { preprocessingState: { status: statusToChange, preprocessedDf }},\n        cbFunc\n      );\n    });\n  }\n  \n  runTsneSteps = (): void => {\n    const { status, preprocessedDf } = this.state.preprocessingState;\n    if (status !== PreprocessingStatus.COMPLETED || !preprocessedDf) {\n      return;\n    }\n\n    const dfData: IDataRow[] = dfToArray(preprocessedDf);\n    const xData: number[] = Array.from(Array(dfData.length).keys());\n\n    this.tsneWorker.postMessage({\n      params: this.state.tsneParams,\n      xData,\n      dfData,\n    });\n  }\n\n  render(): React.ReactNode {\n    return (\n      <PlotContext.Provider value={{ ...this.state, ...this.funcs }}>\n        {this.props.children}\n      </PlotContext.Provider>\n    );\n  }\n}\n","import { IDataFrame, IFieldRecord } from \"data-forge\";\n\nexport function getOriginalDf(df: IDataFrame<number, IFieldRecord>): IDataFrame<number, IFieldRecord> {\n  return df;\n}","import { IDataFrame, IFieldRecord, fromJSON } from \"data-forge\";\n\nexport function parseCorrectTypes(df: IDataFrame<number, IFieldRecord>): IDataFrame<number, IFieldRecord> {\n\tconst columnNames: string[] = df.getColumnNames();\n\tconst jsonDf: any[] = JSON.parse(df.toJSON());\n\tconst jsonDfWithParsedTypes: any[] = [];\n\n\tjsonDf.forEach((row: any) => {\n\t\tconst parsedRow: any = {};\n\n\t\tcolumnNames.forEach((cName: string) => {\n\t\t\tconst parsedValue: number = parseFloat(row[cName]);\n\t\t\tparsedRow[cName] = isNaN(parsedValue) ? row[cName] : parsedValue;\n\t\t});\n\n\t\tjsonDfWithParsedTypes.push(parsedRow);\n\t});\n\n\treturn fromJSON(JSON.stringify(jsonDfWithParsedTypes));\n}","import { IDataFrame, IFieldRecord } from \"data-forge\";\n\nfunction isEmptyValue(value: any): boolean {\n\treturn (\n\t\tvalue === undefined ||\n\t\tvalue === null ||\n\t\tvalue === '' ||\n\t\t(typeof value === 'number' && isNaN(value))\n\t);\n}\n\nexport function dropEmptyColumns(df: IDataFrame<number, IFieldRecord>): IDataFrame<number, IFieldRecord> {\n\tconst columnNames: string[] = df.getColumnNames();\n\tconst jsonDf: any[] = JSON.parse(df.toJSON());\n\n\tconst emptyColumnNames: string[] = [];\n\tcolumnNames.forEach((cName: string) => {\n\t\tconst isColumnEmpty: boolean = jsonDf.every((row: any) => isEmptyValue(row[cName]));\n\n\t\tif (isColumnEmpty) {\n\t\t\temptyColumnNames.push(cName);\n\t\t}\n\t});\n\n\treturn df.dropSeries(emptyColumnNames);\n}","import { IDataFrame, IFieldRecord, Series } from \"data-forge\";\nimport * as jsmlt from '@jsmlt/jsmlt'\n\nexport function encodeStringValues(df: IDataFrame<number, IFieldRecord>): IDataFrame<number, IFieldRecord> {\n\tconst dfTypes = df.detectTypes();\n\n\tlet modifiedDf: IDataFrame<number, IFieldRecord> = df;\n\tconst encoder = new jsmlt.Preprocessing.LabelEncoder();\n\tdfTypes.forEach((row) => {\n\t\tif (row.Type !== 'string') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst columnArray: string[] = df.getSeries(row.Column).toArray();\n\t\tconst encodedColumn: Series = new Series(encoder.encode(columnArray));\n\t\t\n\t\tmodifiedDf = modifiedDf.dropSeries(row.Column);\n\t\tmodifiedDf = modifiedDf.withSeries({ [row.Column]: encodedColumn });\n\t});\n\n\treturn modifiedDf;\n}","import { IDataFrame, IFieldRecord } from \"data-forge\";\nimport { IDataRow } from \"../tsneWrapper/TsneWrapper\";\n\nexport function dfToArray(df: IDataFrame<number, IFieldRecord>): IDataRow[] {\n\tconst rows: IFieldRecord[] = df.toArray();\n\treturn rows.map(\n\t\t(row: IFieldRecord) => Object.values(row)\n\t);\n}","import React, { ReactElement, useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\n// @ts-ignore\nimport tSneData from '../data/cars_tsne.csv';\nimport PlotBuilder from \"./PlotBuilder\";\nimport \"./ScatterPlot.css\";\nimport { usePlotContext } from \"../contexts/PlotContext\";\nimport { throttle } from \"../helpers/throttle\";\n\ninterface Props {}\n\nconst defaultOptions = {\n  width: 600,\n  height: 400,\n  // background: \"#d3d3d3\",\n  margin: { top: 10, left: 30, bottom: 10, right: 10 },\n};\n\nexport type DataRow = {\n  [key: string]: number | string;\n  X: number,\n  Y: number,\n}\nexport default function ScatterPlot(props: Props): ReactElement {\n  const svgRef = useRef(null);\n  const [data, setData] = useState<DataRow[]>();\n  const {\n    styleSettings,\n    setStyleSettings,\n    originalDfJson,\n    tsneStepResult\n  } = usePlotContext();\n\n\tconst updateCarData = () => {\n\t\tconst { points } = tsneStepResult;\n\n\t\tconst pointsWithCarInfo: DataRow[] = points.map((point) => {\n\t\t\tconst { rowId, xCoord, yCoord } = point;\n\t\t\tconst carInfo = originalDfJson ? originalDfJson[rowId] : undefined;\n\n\t\t\treturn (\n\t\t\t\tcarInfo && {\n\t\t\t\t\t...carInfo,\n\t\t\t\t\tX: xCoord,\n\t\t\t\t\tY: yCoord,\n\t\t\t\t}\n\t\t\t);\n\t\t}).filter(f => f);\n\t\tsetData(pointsWithCarInfo);\n\t}\n\n    useEffect(throttle(() => updateCarData(), 500), [tsneStepResult]);\n\n    const ref = useRef<PlotBuilder>(new PlotBuilder());\n\n    useEffect(() => {\n      setStyleSettings({\n        colorField: 'mark',\n        sizeField: 'availabilitycount',\n        nameField: \"model\",\n        opacity: 0.3\n      });\n      ref.current.init(svgRef, defaultOptions);\n    \tref.current.updateScales([-25, 20], [-20, 20]);\n      // ref.current.setUpAxis();\n    }, []);\n\n    useEffect(() => {\n      if (data) {\n      \tref.current.styleM.setSettings(styleSettings);\n        ref.current.updateDots(data);\n      }\n    }, [data, styleSettings]);\n\n    return <svg ref={svgRef} height={\"100%\"}/>;\n}\n","// https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore#_throttle\nexport function throttle(func: any, timeFrame: number) {\n  let lastTime: number = new Date(0).getTime();\n  return (...args: any) => {\n    const now = new Date().getTime();\n    if (now - lastTime >= timeFrame) {\n      func(...args);\n      lastTime = now;\n    }\n  };\n}","import React from \"react\";\nimport styles from \"./Layout.module.scss\";\n\nconst Layout: React.FC = (props) => {\n\tconst { children } = props;\n\treturn (\n\t\t<div className={styles.container}>\n\t\t\t{children}\n\t\t</div>\n\t);\n}\n\nexport default Layout;\n","import React from \"react\";\n\nfunction SettinsIcon() {\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\">\n            <path\n                fill=\"#97E0CA\"\n                d=\"M23.463 9.957l-2.807-.68a9.089 9.089 0 00-.59-1.429l1.44-2.4a.703.703 0 00-.106-.859L19.41 2.6a.703.703 0 00-.858-.105l-2.4 1.44a9.089 9.089 0 00-1.428-.59L14.043.536A.703.703 0 0013.359 0h-2.812a.703.703 0 00-.683.537l-.682 2.807a9.096 9.096 0 00-1.427.59l-2.4-1.44a.703.703 0 00-.86.106L2.507 4.59a.703.703 0 00-.106.858l1.44 2.4A9.09 9.09 0 003.25 9.28l-2.717.68a.703.703 0 00-.533.68v2.812c0 .323.22.604.533.682l2.717.68c.157.495.354.973.59 1.43l-1.44 2.4a.703.703 0 00.107.86l1.988 1.988a.703.703 0 00.86.106l2.4-1.44c.457.237.936.434 1.43.591l.68 2.717c.078.313.36.533.682.533h2.812c.323 0 .604-.22.682-.533l.68-2.717a9.092 9.092 0 001.43-.591l2.401 1.44c.277.166.63.122.859-.106l1.989-1.988a.703.703 0 00.105-.86l-1.44-2.4c.236-.456.434-.934.59-1.427l2.808-.682a.703.703 0 00.537-.683V10.64a.703.703 0 00-.537-.684zm-.87 2.943l-2.664.647a.703.703 0 00-.513.501 7.684 7.684 0 01-.77 1.862.703.703 0 00.006.713l1.365 2.275-1.212 1.213-2.275-1.365a.703.703 0 00-.714-.006 7.689 7.689 0 01-1.861.77.703.703 0 00-.5.508l-.645 2.576h-1.714l-.644-2.576a.703.703 0 00-.5-.508 7.684 7.684 0 01-1.862-.77.703.703 0 00-.714.006L5.101 20.11 3.89 18.898l1.365-2.275a.703.703 0 00.006-.713 7.683 7.683 0 01-.77-1.862.703.703 0 00-.508-.5l-2.576-.644V11.19l2.576-.644a.703.703 0 00.508-.5 7.684 7.684 0 01.77-1.862.703.703 0 00-.006-.714L3.89 5.195l1.212-1.212 2.276 1.365a.703.703 0 00.713.006 7.683 7.683 0 011.862-.77.703.703 0 00.501-.513l.647-2.665h1.707l.646 2.665a.7.7 0 00.502.513 7.684 7.684 0 011.86.77.703.703 0 00.715-.006l2.275-1.365 1.212 1.212-1.365 2.275a.703.703 0 00-.006.714c.335.58.594 1.205.77 1.862.066.248.263.44.513.501l2.665.646V12.9z\"\n            />\n            <path\n                fill=\"#97E0CA\"\n                d=\"M12 8c-2.206 0-4 1.794-4 4s1.794 4 4 4 4-1.794 4-4-1.794-4-4-4zm0 6.857A2.86 2.86 0 019.143 12 2.86 2.86 0 0112 9.143 2.86 2.86 0 0114.857 12 2.86 2.86 0 0112 14.857z\"\n            />\n        </svg>\n    );\n}\n\nexport default SettinsIcon;\n","export function classNames(...cls: Array<string | undefined | false>): string {\n\treturn cls\n\t\t.map((v) => {\n\t\t\tif (typeof v === \"undefined\" || v === false) {\n\t\t\t\t// ignore\n\t\t\t} else if (typeof v === \"string\") {\n\t\t\t\treturn v;\n\t\t\t} else if (!!v[1]) {\n\t\t\t\treturn v[0];\n\t\t\t}\n\t\t\treturn null;\n\t\t})\n\t\t.filter((v) => !!v)\n\t\t.join(\" \");\n}\n","import React, { CSSProperties } from \"react\";\n\nimport styles from \"./BlankButton.module.scss\";\nimport {classNames} from \"../../helpers/classNames\";\n\ntype BlankButtonProps = {\n  className?: string;\n  style?: CSSProperties;\n  title?: string;\n  disabled?: boolean;\n  onClick?: React.MouseEventHandler<HTMLButtonElement>;\n  link?: string;\n};\nconst BlankButton: React.FC<BlankButtonProps> = (props) => {\n  const {\n    link,\n    onClick,\n    title,\n    disabled,\n    className,\n    children,\n    ...restProps\n  } = props;\n  if (link) {\n    return (\n      <a\n        href={disabled ? undefined : link}\n        title={title}\n        style={props.style}\n        className={classNames(styles.button, className, disabled && styles.disabled)}\n        {...restProps}\n      >\n        {children}\n      </a>\n    );\n  }\n  return (\n    <button\n      onClick={onClick}\n      title={title}\n      disabled={disabled}\n      style={props.style}\n      className={classNames(styles.button, className)}\n      {...restProps}\n    >\n      {children}\n    </button>\n  );\n};\n\nexport default BlankButton;\n","import React from \"react\";\nimport ReactSlider from \"react-slider\";\nimport styles from \"./Slider.module.scss\";\n\ntype Props = {\n\tdefaultValue?: number;\n\tdisabled?: boolean;\n\tmax: number;\n\tmin: number;\n\tvalue: number;\n\tonChange: (value: number) => void;\n}\nconst Slider: React.FC<Props> = (props) => {\n\tconst {\n\t\tdefaultValue, disabled,\n\t\tmax, min, value, onChange\n\t} = props;\n\n\treturn (\n\t\t<ReactSlider\n\t\t\tdefaultValue={defaultValue}\n\t\t\tdisabled={disabled}\n\t\t\tmax={max}\n\t\t\tmin={min}\n\t\t\tvalue={value}\n\t\t\tonChange={onChange}\n\t\t\tclassName={styles.slider}\n\t\t\tthumbClassName={styles.thumb}\n\t\t\ttrackClassName={styles.track}\n\t\t\trenderThumb={(props, state) => <div {...props}><span>{state.valueNow}</span></div>}\n\t\t/>);\n}\n\nexport default Slider;\n","import SettinsIcon from \"./icons/SettingsIcon\";\nimport styles from \"./SettingsOverlayModule.module.scss\";\nimport React, { useState } from \"react\";\nimport { classNames } from \"../helpers/classNames\";\nimport BlankButton from \"./common/BlankButton\";\nimport Slider from \"./Slider\";\nimport { usePlotContext } from \"../contexts/PlotContext\";\nimport { ITsneParams } from \"../tsneWrapper/TsneWrapper\";\n\nconst SettingsOverlayModule: React.FC = () => {\n\tconst [open, setOpen] = useState<boolean>(false);\n\n\treturn (\n\t\t<>\n\t\t\t<BlankButton\n\t\t\t\tonClick={() => setOpen(o => !o)}\n\t\t\t\ttitle={open ? \"close\" : \"open\"}\n\t\t\t\tclassName={styles.button}\n\t\t\t>\n\t\t\t\t<SettinsIcon />\n\t\t\t</BlankButton>\n\t\t\t<div className={classNames(styles.settingsContainer, open && styles.opened)}>\n\t\t\t\t<TSneParams />\n\t\t\t\t{/* <StyleParams /> */}\n\t\t\t</div>\n\t\t</>\n\n\t);\n}\n\nconst StyleParams: React.FC = () => {\n\t// TODO: edit component and switch on in SettingsOverlayModule\n\tconst [epsilon, setEpsilon] = useState(0);\n\tconst [perplexity, setPerplexity] = useState(0);\n\tconst [stepsNum, setStepsNum] = useState(0);\n\tconst [costThreshold, setCostThreshold] = useState(0);\n\treturn <>\n\t\t<div className={styles.filterTitle}>\n\t\t\tStyling parameters\n\t\t</div>\n\t\t<div className={styles.paramsGrid}>\n\t\t\t<div className={styles.paramTitle}>Epsilon</div>\n\t\t\t<Slider\n\t\t\t\tdefaultValue={50}\n\t\t\t\tmax={100}\n\t\t\t\tmin={0}\n\t\t\t\tvalue={epsilon}\n\t\t\t\tonChange={setEpsilon}\n\t\t\t/>\n\t\t\t<div className={styles.paramTitle}>Perplexity</div>\n\t\t\t<Slider\n\t\t\t\tdefaultValue={50}\n\t\t\t\tmax={100}\n\t\t\t\tmin={0}\n\t\t\t\tvalue={perplexity}\n\t\t\t\tonChange={setPerplexity}\n\t\t\t/>\n\t\t\t<div className={styles.paramTitle}>Steps number</div>\n\t\t\t<Slider \n\t\t\t\tdefaultValue={50}\n\t\t\t\tmax={100}\n\t\t\t\tmin={0}\n\t\t\t\tvalue={stepsNum}\n\t\t\t\tonChange={setStepsNum}\n\t\t\t/>\n\t\t\t<div className={styles.paramTitle}>Cost threshold</div>\n\t\t\t<Slider \n\t\t\t\tdefaultValue={50}\n\t\t\t\tmax={100}\n\t\t\t\tmin={0}\n\t\t\t\tvalue={costThreshold}\n\t\t\t\tonChange={setCostThreshold}\n\t\t\t/>\n\t\t</div>\n\t</>\n}\n\nconst TSneParams: React.FC = () => {\n\tconst { tsneParams, setTsneParams } = usePlotContext();\n\n\tconst [epsilon, setEpsilon] = useState(tsneParams.epsilon);\n\tconst [perplexity, setPerplexity] = useState(tsneParams.perplexity);\n\tconst [numSteps, setNumSteps] = useState(tsneParams.numSteps);\n\tconst [costThreshold, setCostThreshold] = useState(tsneParams.costThreshold);\n\n\tconst handleOnClickRefitButton = () => {\n\t\tsetTsneParams({\n\t\t\tepsilon,\n\t\t\tperplexity,\n\t\t\tnumSteps,\n\t\t\tcostThreshold,\n\t\t} as ITsneParams);\n\t}\n\n\treturn <>\n\t\t<div className={styles.filterTitle}>\n\t\t\tT-SNE parameters\n\t\t</div>\n\t\t<div className={styles.paramsGrid}>\n\t\t\t<div className={styles.paramTitle}>Epsilon</div>\n\t\t\t<Slider\n\t\t\t\tdefaultValue={50}\n\t\t\t\tmax={100}\n\t\t\t\tmin={0}\n\t\t\t\tvalue={epsilon}\n\t\t\t\tonChange={setEpsilon} \n\t\t\t/>\n\t\t\t<div className={styles.paramTitle}>Perplexity</div>\n\t\t\t<Slider\n\t\t\t\tdefaultValue={50}\n\t\t\t\tmax={100}\n\t\t\t\tmin={0}\n\t\t\t\tvalue={perplexity}\n\t\t\t\tonChange={setPerplexity}\n\t\t\t/>\n\t\t\t<div className={styles.paramTitle}>Steps number</div>\n\t\t\t<Slider\n\t\t\t\tdefaultValue={50}\n\t\t\t\tmax={1000000}\n\t\t\t\tmin={1}\n\t\t\t\tvalue={numSteps}\n\t\t\t\tonChange={setNumSteps}\n\t\t\t/>\n\t\t\t<div className={styles.paramTitle}>Cost threshold</div>\n\t\t\t<Slider\n\t\t\t\tdefaultValue={50}\n\t\t\t\tmax={100}\n\t\t\t\tmin={1}\n\t\t\t\tvalue={costThreshold}\n\t\t\t\tonChange={setCostThreshold}\n\t\t\t/>\n\n\t\t\t<BlankButton\n\t\t\t\tclassName={styles.refitButton}\n\t\t\t\tonClick={handleOnClickRefitButton}\n\t\t\t>\n\t\t\t\tRefit\n\t\t\t</BlankButton>\n\t\t</div>\n\t</>\n}\nexport default SettingsOverlayModule;\n","import React from \"react\";\nimport ScatterPlot from \"../../scatterPlot/ScatterPlot\";\nimport Layout from \"../Layout\";\nimport SettingsOverlayModule from \"../SettingsOverlayModule\";\n\nconst TsneGraphView: React.FC = () => {\n\treturn (\n\t\t<Layout>\n\t\t\t<ScatterPlot />\n\t\t\t<SettingsOverlayModule />\n\t\t</Layout>\n\t);\n}\n\nexport default TsneGraphView;\n","import React, { ChangeEvent, useEffect } from \"react\";\nimport { usePlotContext } from \"../../contexts/PlotContext\";\nimport Layout from \"../Layout\";\nimport styles from \"./UploadCsvPage.module.scss\";\nimport Slider from \"../Slider\";\n\nconst UploadCsvPage: React.FC = () => {\n\tlet fileInputRef: HTMLInputElement | null = null;\n\n\tconst { setCsvFile } = usePlotContext();\n\n\tconst handleFiles = (e: ChangeEvent<HTMLInputElement>) => {\n\t\tif (e.target.files) {\n\t\t\tsetCsvFile(e.target.files[0]);\n\t\t}\n\t}\n\n\treturn (\n\t\t<Layout>\n\t\t\t<div className={styles.container}>\n\t\t\t\t<input\n\t\t\t\t\tref={(ref) => (fileInputRef = ref)}\n\t\t\t\t\ttype=\"file\"\n\t\t\t\t\thidden\n\t\t\t\t\taccept=\".csv\"\n\t\t\t\t\tonChange={handleFiles}\n\t\t\t\t/>\n\t\t\t\t<button\n\t\t\t\t\tclassName={styles.csvButton}\n\t\t\t\t\tonClick={() => fileInputRef?.click()}\n\t\t\t\t>\n\t\t\t\t\tUpload CSV\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</Layout>\n\t);\n}\n\nexport default UploadCsvPage;\n","import * as React from \"react\";\nimport {useEffect} from \"react\";\nimport {BrowserRouter, Navigate, Route, Routes, useNavigate, useLocation } from \"react-router-dom\";\nimport TsneGraphView from \"./TsneGraphView\";\nimport UploadCsvPage from \"./UploadCsvPage\";\nimport {PreprocessingStatus, usePlotContext} from \"../../contexts/PlotContext\";\n\nexport const UPLOAD_CSV = \"upload_csv\";\nexport const GRAPH_VIEW = \"graph\";\n\nexport const Router = (): React.ReactElement => {\n\treturn <BrowserRouter>\n\t\t<PagePicker />\n\t</BrowserRouter>;\n};\n\nfunction PagePicker() {\n\tconst {preprocessingState} = usePlotContext();\n\tconst navigate = useNavigate();\n\tconst location = useLocation();\n\n\tuseEffect(() => {\n\t\tif (preprocessingState.status === PreprocessingStatus.COMPLETED) {\n\t\t\tnavigate(GRAPH_VIEW);\n\t\t} else if (location.pathname.includes(GRAPH_VIEW)) {\n\t\t\tnavigate(UPLOAD_CSV);\n\t\t}\n\t}, [preprocessingState]);\n\treturn (\n\t\t<Routes>\n\t\t\t<Route path={UPLOAD_CSV} element={<UploadCsvPage />} />\n\t\t\t<Route path={GRAPH_VIEW + \"/*\"} element={<TsneGraphView />} />\n\t\t\t<Route path=\"/\" element={<Navigate to={UPLOAD_CSV} />} />\n\t\t</Routes>\n\t);\n}\n","import React from 'react';\nimport './App.css';\nimport {Router} from \"./components/pages/Router\";\nimport PlotContextContainer from \"./contexts/PlotContext\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PlotContextContainer>\n        <Router />\n      </PlotContextContainer>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"BlankButton_button__SL-sV\",\"disabled\":\"BlankButton_disabled__3W6ak\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"slider\":\"Slider_slider__oktDX\",\"track\":\"Slider_track__1xMSL\",\"thumb\":\"Slider_thumb__3fYCR\"};"],"sourceRoot":""}