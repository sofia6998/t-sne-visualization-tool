{"version":3,"sources":["components/pages/UploadCsvPage.module.scss","components/SettingsOverlayModule.module.scss","components/Layout.module.scss","components/common/Input.module.scss","components/common/ThemeToggle.module.scss","components/common/DropDownInput.module.scss","scatterPlot/plotHelpers.ts","scatterPlot/PlotBuilder.ts","preprocessing/dropDefaultColumns.ts","preprocessing/isEmptyValue.ts","runTsne.worker.ts","contexts/PlotContext.tsx","preprocessing/getOriginalDf.ts","preprocessing/dropEmptyColumns.ts","preprocessing/encodeStringValues.ts","preprocessing/replaceEmptyValues.ts","preprocessing/dfToArray.ts","dfMetadata/getDfMetadata.ts","helpers/throttle.ts","scatterPlot/ScatterPlot.tsx","components/Layout.tsx","components/icons/SettingsIcon.tsx","helpers/classNames.ts","components/common/BlankButton.tsx","components/common/Slider.tsx","components/icons/DropDownIcon.tsx","components/common/DropDownInput.tsx","helpers/useClickOutside.tsx","components/common/Input.tsx","helpers/themeHelper.ts","components/common/ThemeToggle.tsx","components/SettingsOverlayModule.tsx","components/pages/TsneGraphView.tsx","components/pages/UploadCsvPage.tsx","components/pages/Router.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/common/BlankButton.module.scss","components/common/Slider.module.scss"],"names":["module","exports","colorGenerator","deg","step","getColorByHue","value","hue","ColorManager","gen","map","this","NaN","parseInt","next","StyleManager","colorManager","styleSettings","setSettings","reset","getPointRadius","d","sizeField","getPointText","nameField","getPointColor","colorField","getColor","getPointOpacity","opacity","DOT_CLASS","defaultMargin","top","left","bottom","right","PlotBuilder","styleM","svg","mainG","xScale","d3","yScale","lineFunction","margin","height","width","ref","options","current","append","style","background","attr","setupZooming","zoom","on","e","transform","Math","sqrt","k","selectAll","call","xRange","yRange","domain","range","x","y","curve","selector","remove","data","gDots","enter","X","Y","text","DEFAULT_COLUMNS_TO_DROP","isEmptyValue","undefined","isNaN","Worker_fn","Worker","PreprocessingStatus","PREPROCESSING_PIPELINE","func","df","statusToChange","REMOVING_DEFAULT_COLUMNS","dropSeries","REMOVING_EMPTY_COLUMNS","columnNames","getColumnNames","jsonDf","JSON","parse","toJSON","emptyColumnNames","forEach","cName","every","row","push","ENCODING_STRING_VALUES","dfTypes","detectTypes","modifiedDf","encoder","jsmlt","LabelEncoder","Type","columnArray","getSeries","Column","toArray","encodedColumn","Series","encode","withSeries","REPLACE_EMPTY_VALUES","index","fromJSON","stringify","COMPLETED","PlotContext","React","createContext","usePlotContext","useContext","PlotContextContainer","props","funcs","tsneWorker","TsneWorker","setStyleSettings","setState","setCsvFile","file","csvFile","fileToDataFrame","setTsneParams","newTsneParams","tsneParams","terminate","initTsneWorker","runTsneSteps","a","state","csvFileText","console","log","fromCSV","dynamicTyping","originalDf","endAt","originalDfJson","preprocessDataFrame","preprocessedDf","cbFunc","length","preprocessingState","status","dfData","Object","values","columns","getColumns","getDfMetadata","xData","Array","from","keys","postMessage","params","NOT_PARSED","epsilon","perplexity","numSteps","costThreshold","pointsRange","tsneStepResult","currentStep","currentCost","points","onmessage","event","stepResult","onTsneStepCompleted","result","Provider","children","Component","throttle","timeFrame","lastTime","Date","getTime","now","defaultOptions","ScatterPlot","svgRef","useRef","useState","setData","useEffect","pointsWithCarInfo","point","rowId","xCoord","yCoord","carInfo","filter","f","updateCarData","updateDots","updateDotsData","init","updateScales","Layout","className","styles","container","SettinsIcon","xmlns","fill","classNames","cls","v","join","BlankButton","link","onClick","title","disabled","restProps","href","button","Slider","defaultValue","max","min","onChange","ReactSlider","slider","thumbClassName","thumb","trackClassName","track","renderThumb","valueNow","DropDownIcon","DropDownInput","itemsList","error","label","selected","smaller","isListHidden","setIsListHidden","dropDownRef","handler","domNodeRef","handleMouseDown","contains","target","document","addEventListener","removeEventListener","useClickOutside","handleSelect","useCallback","item","dropDownList","hiddenList","dropDownIcon","rotateIcon","dropDownWrapper","dropDownContainer","key","it","listItem","errorText","Input","wrapper","DARK","LIGHT","updateColorTheme","theme","getColorTheme","arrayOfVariableKeys","colors","arrayOfVariableValues","cssVariableKey","documentElement","setProperty","color","localStorage","getItem","includes","light","dark","ThemeToggle","isLight","setIsLight","setItem","toggleColorTheme","themeToggleContainer","viewBox","StyleParams","dropdownItems","setDropdownItems","dfKey","handleOnChangeColorField","handleOnChangeSizeField","handleOnChangeNameField","handleOnChangeOpacity","newOpacity","filterTitle","paramsGrid","paramTitle","TSneParams","setEpsilon","setPerplexity","setNumSteps","setCostThreshold","refitButton","SettingsOverlayModule","open","setOpen","o","settingsContainer","opened","TsneGraphView","UploadCsvPage","fileInputRef","type","hidden","accept","files","csvButton","click","UPLOAD_CSV","GRAPH_VIEW","Router","PagePicker","navigate","useNavigate","location","useLocation","pathname","path","element","to","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ef357543.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"UploadCsvPage_container__2Kou4\",\"csvButton\":\"UploadCsvPage_csvButton__2AVTe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingsContainer\":\"SettingsOverlayModule_settingsContainer__1hhXP\",\"opened\":\"SettingsOverlayModule_opened__1pMgn\",\"button\":\"SettingsOverlayModule_button__2cMtM\",\"filterTitle\":\"SettingsOverlayModule_filterTitle__1C_sZ\",\"paramsGrid\":\"SettingsOverlayModule_paramsGrid__3BSBK\",\"paramTitle\":\"SettingsOverlayModule_paramTitle__Pmotw\",\"refitButton\":\"SettingsOverlayModule_refitButton__1NTO7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Layout_container__2g3W4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Input_wrapper__2BA42\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"themeToggleContainer\":\"ThemeToggle_themeToggleContainer__2qn_h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dropDownWrapper\":\"DropDownInput_dropDownWrapper__3I76e\",\"dropDownContainer\":\"DropDownInput_dropDownContainer__257KA\",\"smaller\":\"DropDownInput_smaller__1yw6h\",\"disabled\":\"DropDownInput_disabled__2yb-W\",\"dropDownIcon\":\"DropDownInput_dropDownIcon__1K1e-\",\"rotateIcon\":\"DropDownInput_rotateIcon__3Qq8G\",\"dropDownList\":\"DropDownInput_dropDownList__331fI\",\"hiddenList\":\"DropDownInput_hiddenList__1touR\",\"listItem\":\"DropDownInput_listItem__2Ph0D\"};","import * as d3 from \"d3\";\nimport { ScaleLinear } from \"d3-scale\";\nimport { Line } from \"d3\";\nimport { DataRow } from \"./ScatterPlot\";\nimport { StyleSettings } from \"../helpers/types\";\n\nexport const DEFAULT_FRAME: Frame = {\n    margin: { top: 10, right: 30, bottom: 30, left: 60 },\n    width: 460 - 60 - 30,\n    height: 400 - 10 - 30\n}\n\nexport type Frame = {\n    width: number;\n    height: number;\n    margin: { top: number, right: number, bottom: number, left: number },\n}\n\nexport default function formatDataToDots(data: Array<DataRow>): Array<[number, number]> {\n    return data.map(d => [d.X, d.Y]);\n}\n\nexport function scaledLine(\n    xScale: ScaleLinear<any, any>,\n    yScale: ScaleLinear<any, any>\n): Line<any> {\n    return d3\n        .line()\n        .x((d) => xScale(d[0]))\n        .y((d) => yScale(d[1]))\n        .curve(d3.curveMonotoneX);\n}\n\nexport function* colorGenerator(): Generator<string, string, number> {\n    // const colors = ['#FCE694', \"#9CFFFA\", \"#B7B6C1\"];\n    let deg = 0;\n    let step = 360;\n    // @ts-ignore\n    let value = yield null;\n    yield getColorByHue(deg);\n    let i = 0;\n    // yield colors[i % 3];\n    while (true) {\n        i++;\n        deg += step;\n        if (deg >= 360) {\n            step = step / 2;\n            deg = step / 2;\n        }\n        // @ts-ignore\n        let value = yield null;\n        yield getColorByHue(value || deg);\n        // yield colors[i % 3];\n    }\n}\n\nexport function getColorByHue(hue: number): string {\n    return `hsl(${hue}, 70%, 60%)`;\n}\n\nexport function getRandomColor(): string {\n    return `hsl(${Math.floor(Math.random() * 360)}, 70%, 60%)`;\n}\n\nexport class ColorManager {\n    private gen: Generator<string, string, number>;\n    private map: { [key: string | number]: string };\n    constructor() {\n        this.gen = colorGenerator();\n        this.map = {};\n    }\n\n    getColor(value: string | number) {\n        if (!this.map[value]) {\n            if (parseInt(value + \"\") !== NaN) {\n                this.map[value] = this.gen.next(parseInt(value + \"\")).value;\n            } else {\n                this.map[value] = this.gen.next().value;\n            }\n        }\n        return this.map[value];\n    }\n\n    reset() {\n        this.map = {};\n        this.gen = colorGenerator();\n    }\n}\n\nexport class StyleManager {\n    private colorManager = new ColorManager();\n    private styleSettings: StyleSettings = {};\n    constructor() {\n        this.styleSettings = {};\n    }\n\n    setSettings = (styleSettings: StyleSettings) => {\n        this.styleSettings = styleSettings || {};\n        this.colorManager.reset();\n    }\n\n    getPointRadius = (d: any) => {\n        const { sizeField } = this.styleSettings;\n        // @ts-ignore\n        return (d[sizeField] || 1.51);\n    }\n\n    getPointText = (d: any) => {\n        const { nameField } = this.styleSettings;\n        // @ts-ignore\n        return d[nameField];\n    }\n\n    getPointColor = (d: any) => {\n        const { colorField } = this.styleSettings;\n        // @ts-ignore\n        return this.colorManager.getColor(d[colorField]);\n    }\n\n    getPointOpacity = (d: any) => {\n        const { opacity } = this.styleSettings;\n        // @ts-ignore\n        return opacity || 1;\n    }\n\n    reset = () => {\n        this.colorManager.reset();\n    }\n}\n","import { RefObject } from \"react\";\nimport { Selection } from \"d3\";\nimport * as d3 from \"d3\";\nimport {DataRow} from \"./ScatterPlot\";\nimport {scaledLine, StyleManager} from \"./plotHelpers\";\n\n\nconst DOT_CLASS = \"dot\";\ntype Options = {\n    width: number;\n    height: number;\n    background?: string;\n    stroke?: string;\n    margin?: { top: number; left: number; bottom: number; right: number };\n};\n\nconst defaultMargin = { top: 0, left: 0, bottom: 0, right: 0 };\n\nexport default class PlotBuilder {\n    styleM = new StyleManager();\n    private svg: Selection<Element, any, HTMLElement, any> | undefined;\n    private mainG: Selection<SVGGElement, any, HTMLElement, any> | undefined;\n    private xScale = d3.scaleLinear();\n    private yScale = d3.scaleLinear();\n    private lineFunction = d3.line();\n    private margin = defaultMargin;\n    private height = 0;\n    private width = 0;\n\n    init(ref: RefObject<any>, options: Options): void {\n        this.svg = d3.select<Element, any>(ref.current);\n        this.mainG = this.svg.append('g');\n        this.svg.style(\"background\", options.background || \"transparent\");\n        this.svg.attr(\"height\", \"auto\");\n        this.svg.attr(\"width\", \"100%\");\n        this.svg.attr(\"viewBox\", `0 0 ${options.width} ${options.height}`);\n        this.margin = options.margin || defaultMargin;\n        this.width = options.width - this.margin.left - this.margin.right;\n        this.height = options.height - this.margin.top - this.margin.bottom;\n\n        this.setupZooming();\n    }\n\n    setupZooming() {\n        const zoom = d3.zoom().on(\"zoom\", e => {\n            d3.select('svg g').attr(\"transform\", (e.transform));\n            this.svg?.style(\"stroke-width\", 3 / Math.sqrt(e.transform.k));\n            this.svg?.selectAll(\"circle\").attr(\"r\", (d) => this.styleM.getPointRadius(d) / Math.sqrt(e.transform.k));\n            this.svg?.selectAll(`.${DOT_CLASS} text`).style(\"font-size\", 5 / Math.sqrt(e.transform.k));\n        });\n\n        this.svg?.call(zoom);\n    }\n\n    updateScales(xRange: [number, number], yRange: [number, number]): void {\n        this.xScale = d3\n            .scaleLinear()\n            .domain([xRange[0], xRange[1]])\n            .range([this.margin.left, this.width]);\n        this.yScale = d3\n            .scaleLinear()\n            .domain([yRange[0], yRange[1]])\n            .range([this.height, this.margin.bottom]);\n        this.lineFunction = scaledLine(this.xScale, this.yScale);\n    }\n\n    remove(selector: string): void {\n        this.svg?.selectAll(selector).remove();\n    }\n\n    updateDots(\n        data: Array<DataRow>,\n    ): void {\n        this.remove(\".\" + DOT_CLASS);\n        const gDots = this.mainG?.selectAll(DOT_CLASS)\n            .data(data)\n            .enter()\n            .append('g')\n            .attr(\"class\", DOT_CLASS);\n        gDots?.append(\"circle\")\n            .attr(\"cx\", (d) => {\n                return this.xScale(d.X) } )\n            .attr(\"cy\", (d) => { return this.yScale(d.Y) } )\n            .attr(\"r\", this.styleM.getPointRadius)\n            .style(\"opacity\", this.styleM.getPointOpacity)\n            .style(\"fill\", this.styleM.getPointColor);\n        gDots?.append(\"text\").text(this.styleM.getPointText)\n            .style(\"color\", \"#69b3a2\")\n            .style(\"font-weight\", \"100\")\n            .style(\"font-size\", \"10px\")\n            .attr(\"x\", (d) => {\n            return this.xScale(d.X) } )\n            .attr(\"y\", (d) => { return this.yScale(d.Y) } );\n    }\n\n    setUpAxis(): void {\n        if (!this.mainG) {\n            return;\n        }\n        const xAxis = this.mainG\n            .append(\"g\")\n            .attr(\"transform\", \"translate(0,\" + this.height + \")\")\n            .attr(\"class\", \"axis axis--x\")\n            .call(d3.axisBottom(this.xScale))\n            .style(\"color\", \"transparent\");\n\n        xAxis.selectAll(\"text\").style(\"fill\", \"#59536B\");\n\n        const yAxis = this.mainG\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + this.margin.left + \", 0)\")\n            .attr(\"class\", \"axis axis--y\")\n            .call(d3.axisLeft(this.yScale))\n            .style(\"color\", \"transparent\");\n\n        yAxis.selectAll(\"text\").style(\"fill\", \"#59536B\");\n    }\n}\n","import { IDataFrame, IFieldRecord } from \"data-forge\";\n\nconst DEFAULT_COLUMNS_TO_DROP: string[] = [\"id\"];\n\nexport function dropDefaultColumns(df: IDataFrame<number, IFieldRecord>): IDataFrame<number, IFieldRecord> {\n\treturn df.dropSeries(DEFAULT_COLUMNS_TO_DROP);\n}","export function isEmptyValue(value: any): boolean {\n  return (\n    value === undefined ||\n    value === null ||\n    value === '' ||\n    (typeof value === 'number' && isNaN(value))\n  );\n}","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/runTsne.worker.f4604769.worker.js\");\n}\n","import React, { useContext } from \"react\";\nimport { DataFrame, fromCSV, IDataFrame, IFieldRecord } from \"data-forge\";\nimport {\n  getOriginalDf,\n  dropDefaultColumns,\n  dropEmptyColumns,\n  encodeStringValues,\n  replaceEmptyValues,\n  dfToArray,\n} from \"../preprocessing\";\nimport { getDfMetadata } from \"../dfMetadata/getDfMetadata\";\nimport {\n  ITsneParams,\n  IDataRow,\n  ITsneStepResult,\n} from \"../tsneWrapper/TsneWrapper\";\nimport { StyleSettings } from \"../helpers/types\";\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport TsneWorker from 'worker-loader!../runTsne.worker';\n\nexport enum PreprocessingStatus {\n  NOT_PARSED,\n  REMOVING_DEFAULT_COLUMNS,\n  REMOVING_EMPTY_COLUMNS,\n  ENCODING_STRING_VALUES,\n  REPLACE_EMPTY_VALUES,\n  COMPLETED,\n}\n\nexport interface PreprocessingState {\n  status: PreprocessingStatus,\n  preprocessedDf: IDataFrame<number, IFieldRecord> | null,\n}\n\ninterface PreprocessingStep {\n  func: (df: IDataFrame<number, IFieldRecord>) => IDataFrame<number, IFieldRecord>,\n  statusToChange: PreprocessingStatus,\n}\n\ninterface PlotState {\n  csvFile: File | null;\n  originalDf: IDataFrame<number, IFieldRecord> | null,\n  originalDfJson: any[] | null,\n  preprocessingState: PreprocessingState,\n  tsneParams: ITsneParams,\n  tsneStepResult: ITsneStepResult,\n  styleSettings: StyleSettings,\n}\n\ninterface PlotFuncs {\n  setCsvFile: (file: File | null) => void;\n  setStyleSettings: (style: StyleSettings) => void;\n  setTsneParams: (newTsneParams: ITsneParams) => void;\n}\n\ntype IPlotContext = PlotState & PlotFuncs;\n\nconst PREPROCESSING_PIPELINE: PreprocessingStep[] = [\n  { func: getOriginalDf, statusToChange: PreprocessingStatus.REMOVING_DEFAULT_COLUMNS },\n  { func: dropDefaultColumns, statusToChange: PreprocessingStatus.REMOVING_EMPTY_COLUMNS },\n  { func: dropEmptyColumns, statusToChange: PreprocessingStatus.ENCODING_STRING_VALUES },\n  { func: encodeStringValues, statusToChange: PreprocessingStatus.REPLACE_EMPTY_VALUES },\n  { func: replaceEmptyValues, statusToChange: PreprocessingStatus.COMPLETED },\n];\n\nconst PlotContext = React.createContext<IPlotContext | any>(null);\nexport const usePlotContext = (): IPlotContext =>\n  useContext<IPlotContext>(PlotContext);\n\nexport default class PlotContextContainer extends React.Component<\n  any,\n  PlotState\n> {\n  private readonly funcs: PlotFuncs;\n  private tsneWorker: TsneWorker = new TsneWorker();\n\n  constructor(props: Readonly<{}>) {\n    super(props);\n\n    this.state = {\n      csvFile: null,\n      originalDf: null,\n      originalDfJson: null,\n      preprocessingState: {\n        status: PreprocessingStatus.NOT_PARSED,\n        preprocessedDf: null,\n      },\n      tsneParams: {\n        epsilon: 10,\n        perplexity: 30,\n        numSteps: 500,\n        costThreshold: 11,\n        pointsRange: {\n          x: [-1, 1],\n          y: [-1, 1],\n        },\n      },\n      tsneStepResult: {\n        currentStep: 0,\n        currentCost: 0,\n        points: [],\n      },\n      styleSettings: {\n        colorField: \"mark\",\n      },\n    };\n\n    this.funcs = {\n      setCsvFile: this.setCsvFile,\n      setStyleSettings: this.setStyleSettings,\n      setTsneParams: this.setTsneParams,\n    };\n  }\n\n  componentDidMount() {\n    this.initTsneWorker();\n  }\n\n  initTsneWorker() {\n    const onTsneStepCompleted = (stepResult: ITsneStepResult): void => {\n      this.setState({ tsneStepResult: stepResult });\n    }\n\n    this.tsneWorker.onmessage = function (event: MessageEvent<any>) {\n      const stepResult = event.data.result as ITsneStepResult;\n      onTsneStepCompleted(stepResult);\n    }\n  }\n\n  setStyleSettings = (styleSettings: StyleSettings) => {\n    this.setState({ styleSettings });\n  }\n\n  setCsvFile = (file: File | null) => {\n    this.setState({ csvFile: file }, this.fileToDataFrame);\n  }\n\n  setTsneParams = (newTsneParams: ITsneParams): void => {\n    this.setState(\n      { tsneParams: newTsneParams },\n      () => {\n        this.tsneWorker.terminate();\n\n        this.tsneWorker = new TsneWorker();\n        this.initTsneWorker();\n        this.runTsneSteps();\n      }\n    );\n  }\n\n  fileToDataFrame = async (): Promise<void> => {\n    if (this.state.csvFile === null) {\n      return;\n    }\n\n    const csvFileText: string | undefined = await this.state.csvFile?.text();\n    if (csvFileText === undefined) {\n      console.log('Error: No text from CSV file');\n      return;\n    }\n\n    const df: DataFrame<number, any> = fromCSV(csvFileText, { dynamicTyping: true });\n\n    this.setState(\n      {\n        // originalDf: df,\n        // originalDfJson: df.toArray(),\n        // TODO: for short demo\n        originalDf: (df.endAt(2000) as DataFrame<number, any>),\n        originalDfJson: df.endAt(2000).toArray(),\n      },\n      this.preprocessDataFrame\n    );\n  }\n\n  preprocessDataFrame = (): void => {\n    if (this.state.originalDf === null) {\n      return;\n    }\n\n    const { originalDf } = this.state;\n    let preprocessedDf: IDataFrame<number, IFieldRecord> = originalDf;\n    PREPROCESSING_PIPELINE.forEach((step: PreprocessingStep, index: number) => {\n      const { func, statusToChange } = step;\n\n      preprocessedDf = func(preprocessedDf);\n\n      const cbFunc = (index === PREPROCESSING_PIPELINE.length - 1)\n        ? this.runTsneSteps\n        : () => {};\n\n      this.setState(\n        { preprocessingState: { status: statusToChange, preprocessedDf }},\n        cbFunc\n      );\n    });\n  }\n\n  runTsneSteps = (): void => {\n    const { status, preprocessedDf } = this.state.preprocessingState;\n    if (status !== PreprocessingStatus.COMPLETED || !preprocessedDf) {\n      return;\n    }\n\n    const dfData: IDataRow[] = dfToArray(preprocessedDf);\n    getDfMetadata(preprocessedDf);\n\n    const xData: number[] = Array.from(Array(dfData.length).keys());\n\n    this.tsneWorker.postMessage({\n      params: this.state.tsneParams,\n      xData,\n      dfData,\n    });\n  }\n\n  render(): React.ReactNode {\n    return (\n      <PlotContext.Provider value={{ ...this.state, ...this.funcs }}>\n        {this.props.children}\n      </PlotContext.Provider>\n    );\n  }\n}\n","import { IDataFrame, IFieldRecord } from \"data-forge\";\n\nexport function getOriginalDf(df: IDataFrame<number, IFieldRecord>): IDataFrame<number, IFieldRecord> {\n  return df;\n}","import { IDataFrame, IFieldRecord } from \"data-forge\";\nimport { isEmptyValue } from \"./isEmptyValue\";\n\nexport function dropEmptyColumns(df: IDataFrame<number, IFieldRecord>): IDataFrame<number, IFieldRecord> {\n  const columnNames: string[] = df.getColumnNames();\n  const jsonDf: any[] = JSON.parse(df.toJSON());\n\n  const emptyColumnNames: string[] = [];\n  columnNames.forEach((cName: string) => {\n    const isColumnEmpty: boolean = jsonDf.every((row: any) => isEmptyValue(row[cName]));\n\n    if (isColumnEmpty) {\n      emptyColumnNames.push(cName);\n    }\n  });\n\n  return df.dropSeries(emptyColumnNames);\n}","import { IDataFrame, IFieldRecord, Series } from \"data-forge\";\nimport * as jsmlt from '@jsmlt/jsmlt'\n\nexport function encodeStringValues(df: IDataFrame<number, IFieldRecord>): IDataFrame<number, IFieldRecord> {\n\tconst dfTypes = df.detectTypes();\n\n\tlet modifiedDf: IDataFrame<number, IFieldRecord> = df;\n\tconst encoder = new jsmlt.Preprocessing.LabelEncoder();\n\tdfTypes.forEach((row) => {\n\t\tif (row.Type !== 'string') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst columnArray: string[] = df.getSeries(row.Column).toArray();\n\t\tconst encodedColumn: Series = new Series(encoder.encode(columnArray));\n\t\t\n\t\tmodifiedDf = modifiedDf.dropSeries(row.Column);\n\t\tmodifiedDf = modifiedDf.withSeries({ [row.Column]: encodedColumn });\n\t});\n\n\treturn modifiedDf;\n}","import { IDataFrame, IFieldRecord, fromJSON } from \"data-forge\";\nimport { isEmptyValue } from \"./isEmptyValue\";\n\nconst EMPTY_VALUE_TO_REPLACE: number = -1;\n\nexport function replaceEmptyValues(df: IDataFrame<number, IFieldRecord>): IDataFrame<number, IFieldRecord> {\n  const columnNames: string[] = df.getColumnNames();\n  const jsonDf: any[] = JSON.parse(df.toJSON());\n\n  columnNames.forEach((cName: string) => {\n    jsonDf.forEach((row: any, index: number) => {\n      if (isEmptyValue(row[cName])) {\n        jsonDf[index][cName] = EMPTY_VALUE_TO_REPLACE;\n      }\n    });\n  });\n\n  return fromJSON(JSON.stringify(jsonDf));\n}\n","import { IDataFrame, IFieldRecord } from \"data-forge\";\nimport { IDataRow } from \"../tsneWrapper/TsneWrapper\";\n\nexport function dfToArray(df: IDataFrame<number, IFieldRecord>): IDataRow[] {\n  const rows: IFieldRecord[] = df.toArray();\n  return rows.map(\n    (row: IFieldRecord) => Object.values(row)\n  );\n}","import { IDataFrame, IFieldRecord } from \"data-forge\";\nimport { IDataRow } from \"../tsneWrapper/TsneWrapper\";\n\nexport interface IRowMetadata {\n  columnName: string;\n  minValue: number;\n  maxValue: number;\n}\n\nexport function getDfMetadata(df: IDataFrame<number, IFieldRecord>): IRowMetadata[] {\n  const rowsMetadata: IRowMetadata[] = [];\n\n  const columns = df.getColumns();\n  console.log('columns:', columns); // TODO: log\n\n  return rowsMetadata;\n} ","// https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore#_throttle\nexport function throttle(func: any, timeFrame: number) {\n  let lastTime: number = new Date(0).getTime();\n  return (...args: any) => {\n    const now = new Date().getTime();\n    if (now - lastTime >= timeFrame) {\n      func(...args);\n      lastTime = now;\n    }\n  };\n}","import React, { ReactElement, useEffect, useRef, useState } from \"react\";\nimport PlotBuilder from \"./PlotBuilder\";\nimport \"./ScatterPlot.css\";\nimport { IDataRow, IPointsRange } from \"../tsneWrapper/TsneWrapper\";\nimport { usePlotContext } from \"../contexts/PlotContext\";\nimport { throttle } from \"../helpers/throttle\";\n\ninterface Props { }\n\nconst defaultOptions = {\n  width: 600,\n  height: 400,\n  // background: \"#d3d3d3\",\n  margin: { top: 10, left: 30, bottom: 10, right: 10 },\n};\n\nexport type DataRow = {\n  [key: string]: number | string;\n  X: number,\n  Y: number,\n}\nexport default function ScatterPlot(props: Props): ReactElement {\n  const svgRef = useRef(null);\n  const [data, setData] = useState<DataRow[]>();\n  const {\n    styleSettings,\n    setStyleSettings,\n    originalDfJson,\n    tsneParams,\n    tsneStepResult,\n  } = usePlotContext();\n\n  const ref = useRef<PlotBuilder>(new PlotBuilder());\n\n  const updateCarData = () => {\n    const { points } = tsneStepResult;\n\n    const pointsWithCarInfo: DataRow[] = points.map((point) => {\n      const { rowId, xCoord, yCoord } = point;\n      const carInfo = originalDfJson ? originalDfJson[rowId] : undefined;\n\n      return (\n        carInfo && {\n          ...carInfo,\n          X: xCoord,\n          Y: yCoord,\n        }\n      );\n    }).filter(f => f);\n    setData(pointsWithCarInfo);\n  }\n\n  const updateDotsData = (data: DataRow[] | undefined) => {\n    if (data) {\n      ref.current.updateDots(data);\n    }\n  }\n\n  useEffect(throttle(() => updateCarData(), 500), [tsneStepResult]);\n\n  useEffect(throttle(() => updateDotsData(data), 2000), [data]);\n\n  useEffect(() => {\n    ref.current.init(svgRef, defaultOptions);\n    ref.current.updateScales(\n      tsneParams.pointsRange.x,\n      tsneParams.pointsRange.y,\n    );\n  }, []);\n\n  useEffect(() => {\n    if (data) {\n      ref.current.styleM.setSettings(styleSettings);\n      ref.current.updateDots(data);\n    }\n  }, [styleSettings]);\n\n  return <svg ref={svgRef} height={\"100%\"} />;\n}\n","import React from \"react\";\nimport styles from \"./Layout.module.scss\";\n\nconst Layout: React.FC = (props) => {\n\tconst { children } = props;\n\treturn (\n\t\t<div className={styles.container}>\n\t\t\t{children}\n\t\t</div>\n\t);\n}\n\nexport default Layout;\n","import React from \"react\";\n\nfunction SettinsIcon() {\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\">\n            <path\n                fill=\"#97E0CA\"\n                d=\"M23.463 9.957l-2.807-.68a9.089 9.089 0 00-.59-1.429l1.44-2.4a.703.703 0 00-.106-.859L19.41 2.6a.703.703 0 00-.858-.105l-2.4 1.44a9.089 9.089 0 00-1.428-.59L14.043.536A.703.703 0 0013.359 0h-2.812a.703.703 0 00-.683.537l-.682 2.807a9.096 9.096 0 00-1.427.59l-2.4-1.44a.703.703 0 00-.86.106L2.507 4.59a.703.703 0 00-.106.858l1.44 2.4A9.09 9.09 0 003.25 9.28l-2.717.68a.703.703 0 00-.533.68v2.812c0 .323.22.604.533.682l2.717.68c.157.495.354.973.59 1.43l-1.44 2.4a.703.703 0 00.107.86l1.988 1.988a.703.703 0 00.86.106l2.4-1.44c.457.237.936.434 1.43.591l.68 2.717c.078.313.36.533.682.533h2.812c.323 0 .604-.22.682-.533l.68-2.717a9.092 9.092 0 001.43-.591l2.401 1.44c.277.166.63.122.859-.106l1.989-1.988a.703.703 0 00.105-.86l-1.44-2.4c.236-.456.434-.934.59-1.427l2.808-.682a.703.703 0 00.537-.683V10.64a.703.703 0 00-.537-.684zm-.87 2.943l-2.664.647a.703.703 0 00-.513.501 7.684 7.684 0 01-.77 1.862.703.703 0 00.006.713l1.365 2.275-1.212 1.213-2.275-1.365a.703.703 0 00-.714-.006 7.689 7.689 0 01-1.861.77.703.703 0 00-.5.508l-.645 2.576h-1.714l-.644-2.576a.703.703 0 00-.5-.508 7.684 7.684 0 01-1.862-.77.703.703 0 00-.714.006L5.101 20.11 3.89 18.898l1.365-2.275a.703.703 0 00.006-.713 7.683 7.683 0 01-.77-1.862.703.703 0 00-.508-.5l-2.576-.644V11.19l2.576-.644a.703.703 0 00.508-.5 7.684 7.684 0 01.77-1.862.703.703 0 00-.006-.714L3.89 5.195l1.212-1.212 2.276 1.365a.703.703 0 00.713.006 7.683 7.683 0 011.862-.77.703.703 0 00.501-.513l.647-2.665h1.707l.646 2.665a.7.7 0 00.502.513 7.684 7.684 0 011.86.77.703.703 0 00.715-.006l2.275-1.365 1.212 1.212-1.365 2.275a.703.703 0 00-.006.714c.335.58.594 1.205.77 1.862.066.248.263.44.513.501l2.665.646V12.9z\"\n            />\n            <path\n                fill=\"#97E0CA\"\n                d=\"M12 8c-2.206 0-4 1.794-4 4s1.794 4 4 4 4-1.794 4-4-1.794-4-4-4zm0 6.857A2.86 2.86 0 019.143 12 2.86 2.86 0 0112 9.143 2.86 2.86 0 0114.857 12 2.86 2.86 0 0112 14.857z\"\n            />\n        </svg>\n    );\n}\n\nexport default SettinsIcon;\n","export function classNames(...cls: Array<string | undefined | false>): string {\n\treturn cls\n\t\t.map((v) => {\n\t\t\tif (typeof v === \"undefined\" || v === false) {\n\t\t\t\t// ignore\n\t\t\t} else if (typeof v === \"string\") {\n\t\t\t\treturn v;\n\t\t\t} else if (!!v[1]) {\n\t\t\t\treturn v[0];\n\t\t\t}\n\t\t\treturn null;\n\t\t})\n\t\t.filter((v) => !!v)\n\t\t.join(\" \");\n}\n","import React, { CSSProperties } from \"react\";\n\nimport styles from \"./BlankButton.module.scss\";\nimport {classNames} from \"../../helpers/classNames\";\n\ntype BlankButtonProps = {\n  className?: string;\n  style?: CSSProperties;\n  title?: string;\n  disabled?: boolean;\n  onClick?: React.MouseEventHandler<HTMLButtonElement>;\n  link?: string;\n};\nconst BlankButton: React.FC<BlankButtonProps> = (props) => {\n  const {\n    link,\n    onClick,\n    title,\n    disabled,\n    className,\n    children,\n    ...restProps\n  } = props;\n  if (link) {\n    return (\n      <a\n        href={disabled ? undefined : link}\n        title={title}\n        style={props.style}\n        className={classNames(styles.button, className, disabled && styles.disabled)}\n        {...restProps}\n      >\n        {children}\n      </a>\n    );\n  }\n  return (\n    <button\n      onClick={onClick}\n      title={title}\n      disabled={disabled}\n      style={props.style}\n      className={classNames(styles.button, className)}\n      {...restProps}\n    >\n      {children}\n    </button>\n  );\n};\n\nexport default BlankButton;\n","import React from \"react\";\nimport ReactSlider from \"react-slider\";\nimport styles from \"./Slider.module.scss\";\n\ntype Props = {\n\tdefaultValue?: number;\n\tdisabled?: boolean;\n\tmax: number;\n\tmin: number;\n\tvalue: number;\n\tonChange: (value: number) => void;\n\tstep?: number;\n}\nconst Slider: React.FC<Props> = (props) => {\n\tconst {\n\t\tdefaultValue, disabled,\n\t\tmax, min, value, onChange,\n\t\tstep\n\t} = props;\n\n\treturn (\n\t\t<ReactSlider\n\t\t\tdefaultValue={defaultValue}\n\t\t\tdisabled={disabled}\n\t\t\tmax={max}\n\t\t\tmin={min}\n\t\t\tstep={step ?? 1}\n\t\t\tvalue={value}\n\t\t\tonChange={onChange}\n\t\t\tclassName={styles.slider}\n\t\t\tthumbClassName={styles.thumb}\n\t\t\ttrackClassName={styles.track}\n\t\t\trenderThumb={(props, state) => <div {...props}><span>{state.valueNow}</span></div>}\n\t\t/>);\n}\n\nexport default Slider;\n","import React from \"react\";\n\nconst DropDownIcon: React.FC<{className: string}> = (props) => {\n    return <span className={props.className}>v</span>\n}\nexport default DropDownIcon;\n","import React, { FC, useCallback, useState } from \"react\";\nimport DropDownIcon from \"../icons/DropDownIcon\";\nimport BlankButton from \"./BlankButton\";\nimport styles from \"./DropDownInput.module.scss\";\nimport {useClickOutside} from \"../../helpers/useClickOutside\";\nimport {classNames} from \"../../helpers/classNames\";\n\n\nexport function mapStringToItem(val: string): DropdownItem {\n  return { key: val };\n}\n\nexport type DropdownItem = { value?: any; key: string };\ntype DropDownInputProps = {\n  itemsList: Array<DropdownItem>;\n  onChange: (item: DropdownItem) => void;\n  className?: string;\n  label: string;\n  error: string;\n  selected: DropdownItem;\n  smaller?: boolean;\n};\n\nconst DropDownInput: FC<DropDownInputProps> = (props) => {\n  const {\n    onChange,\n    itemsList,\n    className,\n    label,\n    error,\n    selected,\n    smaller,\n    ...restProps\n  } = props;\n  const [isListHidden, setIsListHidden] = useState(true);\n\n  const dropDownRef = useClickOutside(() => setIsListHidden(true));\n\n  const handleSelect = useCallback((item: DropdownItem): void => {\n    onChange(item);\n    setIsListHidden(true);\n  }, [isListHidden]);\n\n  const renderValueItems = () => {\n    return itemsList.map((it) => (\n      <BlankButton\n        className={styles.listItem}\n        key={it.key}\n        onClick={() => handleSelect(it)}\n      >\n        {it.value || it.key}\n      </BlankButton>\n    ));\n  };\n\n  const dropDownList = classNames(\n    styles.dropDownList,\n    isListHidden && styles.hiddenList,\n    smaller && styles.smaller\n  );\n  const dropDownIcon = classNames(\n    styles.dropDownIcon,\n    !isListHidden && styles.rotateIcon\n  );\n\n  const getFieldValue = () => {\n    return (\n      <div\n        ref={dropDownRef as React.RefObject<HTMLDivElement>}\n        className={styles.dropDownWrapper}\n      >\n        <BlankButton\n          onClick={() => setIsListHidden(!isListHidden)}\n          className={classNames(\n            styles.dropDownContainer,\n            smaller && styles.smaller\n          )}\n        >\n          {selected.value || selected.key || \"\"}\n          <DropDownIcon className={dropDownIcon} />\n        </BlankButton>\n        <div className={dropDownList}>{renderValueItems()}</div>\n      </div>\n    );\n  };\n\n  return (\n      <div data-cy=\"input-wrapper\" {...restProps}>\n        {getFieldValue()}\n        {error && (\n          <span\n            className={styles.errorText}\n            title={error}\n            data-cy=\"input-error\"\n          >\n            {error}\n          </span>\n        )}\n      </div>\n  );\n};\n\nexport default DropDownInput;\n","import { RefObject, useEffect, useRef } from \"react\";\n\nexport const useClickOutside = (\n  handler: () => void\n): RefObject<HTMLElement> => {\n  const domNodeRef = useRef<HTMLElement>(null);\n  useEffect(() => {\n    const handleMouseDown = (event: MouseEvent) => {\n      if (!domNodeRef?.current?.contains(event.target as Element)) {\n        handler();\n      }\n    };\n    document.addEventListener(\"mousedown\", handleMouseDown);\n\n    return () => {\n      document.removeEventListener(\"mousedown\", handleMouseDown);\n    };\n  }, []);\n  return domNodeRef;\n};\n","import React, { FC } from \"react\";\nimport styles from \"./Input.module.scss\";\n\n\ntype InputProps = {\n  onChange: (val: string) => void;\n  className?: string;\n  value?: number;\n};\n\nconst Input: FC<InputProps> = (props) => {\n  const {\n    onChange,\n    value,\n  } = props;\n\n  return (\n      <input\n          className={styles.wrapper}\n          value={value}\n          onChange={(e) => onChange(e.target.value)}\n      />\n  );\n};\n\nexport default Input;\n","export const DARK = \"dark\";\nexport const LIGHT = \"light\";\n\nexport type Theme = \"dark\" | \"light\";\n\nexport function updateColorTheme(): void {\n  const theme = getColorTheme();\n  const arrayOfVariableKeys = Object.keys(colors);\n  const arrayOfVariableValues = Object.values(colors);\n\n  arrayOfVariableKeys.forEach((cssVariableKey, index) => {\n    document.documentElement.style.setProperty(\n      cssVariableKey,\n      arrayOfVariableValues[index][theme]\n    );\n  });\n}\n\nexport function toggleColorTheme(): Theme {\n  const cur = getColorTheme();\n  const theme = cur === LIGHT ? DARK : LIGHT;\n  localStorage.setItem(\"colorTheme\", theme);\n  updateColorTheme();\n  return theme;\n}\n\nexport function getColorTheme(): Theme {\n  const color = localStorage.getItem(\"colorTheme\") || \"\";\n  if (![DARK, LIGHT].includes(color)) {\n    return DARK;\n  }\n  return <Theme>color;\n}\n\ntype Colors = {\n  [key: string]: { dark: string; light: string };\n};\n\nconst colors: Colors = {\n\"--background\": {light: \"#DADADF\", dark: \"#34344A\"},\n\"--background-light\": {light: \"#FEFEFE\", dark: \"#48485C\"},\n\n\"--font\": {light: \"#7DC2C5\", dark: \"#7DC2C5\"},\n\"--grey-font\": {light: \"#34344A\", dark: \"#B7B6C1\"},\n\n\"--button-color\": {light: \"#9CFFFA\", dark: \"#7DC2C5\"},\n\"--button-font\": {light: \"#34344A\", dark: \"#FEFEFE\"},\n\n\"--sub-text\": {light: \"#929D9E\", dark: \"#929D9E\"},\n\"--accent-blue\": {light: \"#7DC2C5\", dark: \"#97E0CA\"},\n\n\"--border-color\": {light: \"#DADADF\", dark: \"#B7B6C1\"},\n\n\n\"--slider-track\": {light: \"#7DC2C5\", dark: \"#9CFFFA\"},\n\"--slider-dot\": {light: \"#7DC2C5\", dark: \"#7DC2C5\"},\n};\n","import React, {useState} from \"react\";\nimport styles from \"./ThemeToggle.module.scss\";\nimport BlankButton from \"./BlankButton\";\nimport {getColorTheme, LIGHT, toggleColorTheme} from \"../../helpers/themeHelper\";\n\nconst ThemeToggle: React.FC<{}> = (props) => {\n    const [isLight, setIsLight] = useState(getColorTheme() === LIGHT);\n    return (\n        <BlankButton\n            data-cy=\"theme-toggle\"\n            {...props}\n            onClick={() => {\n                setIsLight(toggleColorTheme() === LIGHT);\n            }}\n            className={styles.themeToggleContainer}\n        >\n            {isLight\n                ? <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    width=\"60\"\n                    height=\"60\"\n                    fill=\"none\"\n                    viewBox=\"0 0 60 60\"\n                >\n                    <path\n                        fill=\"#34344A\"\n                        d=\"M30 21a9 9 0 109 9c0-.46-.04-.92-.1-1.36a5.389 5.389 0 01-4.4 2.26 5.403 5.403 0 01-3.14-9.8c-.44-.06-.9-.1-1.36-.1z\"\n                    />\n                </svg>\n            : <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    width=\"60\"\n                    height=\"60\"\n                    fill=\"none\"\n                    viewBox=\"0 0 60 60\"\n                >\n                    <path\n                        fill=\"#ECECEF\"\n                        d=\"M30 25c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5zm-10 6h2c.55 0 1-.45 1-1s-.45-1-1-1h-2c-.55 0-1 .45-1 1s.45 1 1 1zm18 0h2c.55 0 1-.45 1-1s-.45-1-1-1h-2c-.55 0-1 .45-1 1s.45 1 1 1zm-9-11v2c0 .55.45 1 1 1s1-.45 1-1v-2c0-.55-.45-1-1-1s-1 .45-1 1zm0 18v2c0 .55.45 1 1 1s1-.45 1-1v-2c0-.55-.45-1-1-1s-1 .45-1 1zm-5.01-15.42a.996.996 0 00-1.41 0 .996.996 0 000 1.41l1.06 1.06c.39.39 1.03.39 1.41 0 .38-.39.39-1.03 0-1.41l-1.06-1.06zm12.37 12.37a.996.996 0 00-1.41 0 .996.996 0 000 1.41l1.06 1.06c.39.39 1.03.39 1.41 0a.996.996 0 000-1.41l-1.06-1.06zm1.06-10.96a.996.996 0 000-1.41.996.996 0 00-1.41 0l-1.06 1.06a.996.996 0 000 1.41c.39.38 1.03.39 1.41 0l1.06-1.06zM25.05 36.36a.996.996 0 000-1.41.996.996 0 00-1.41 0l-1.06 1.06a.996.996 0 000 1.41c.39.38 1.03.39 1.41 0l1.06-1.06z\"\n                    />\n                </svg>}\n        </BlankButton>\n    );\n};\n\nexport default ThemeToggle;\n\n","import SettinsIcon from \"./icons/SettingsIcon\";\nimport styles from \"./SettingsOverlayModule.module.scss\";\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { classNames } from \"../helpers/classNames\";\nimport BlankButton from \"./common/BlankButton\";\nimport Slider from \"./common/Slider\";\nimport { usePlotContext } from \"../contexts/PlotContext\";\nimport { ITsneParams } from \"../tsneWrapper/TsneWrapper\";\nimport DropDownInput, { DropdownItem } from \"./common/DropDownInput\";\nimport Input from \"./common/Input\";\nimport ThemeToggle from \"./common/ThemeToggle\";\n\ntype DropdownItemName = 'colorField' | 'sizeField' | 'nameField';\n\nconst SettingsOverlayModule: React.FC = () => {\n  const [open, setOpen] = useState<boolean>(false);\n\n  return (\n    <>\n      <BlankButton\n        onClick={() => setOpen(o => !o)}\n        title={open ? \"close\" : \"open\"}\n        className={styles.button}\n      >\n        <SettinsIcon />\n      </BlankButton>\n      <div className={classNames(styles.settingsContainer, open && styles.opened)}>\n        <ThemeToggle />\n        <TSneParams />\n        <StyleParams />\n      </div>\n    </>\n\n  );\n}\n\nconst StyleParams: React.FC = () => {\n  const { originalDfJson, styleSettings, setStyleSettings } = usePlotContext();\n\n  const [dropdownItems, setDropdownItems] = useState<DropdownItem[]>(\n    [{ key: 'No values to choose' }],\n  );\n\n  useEffect(() => {\n    if (!originalDfJson || !originalDfJson.length) {\n      return;\n    }\n\n    setDropdownItems(\n      Object\n        .keys(originalDfJson[0])\n        .map((dfKey: string) => ({ key: dfKey }))\n    );\n  }, [originalDfJson]);\n\n  const handleOnChangeColorField = useCallback((item: DropdownItem) => {\n    setStyleSettings({ ...styleSettings, colorField: item.key });\n  }, [styleSettings]);\n  const handleOnChangeSizeField = useCallback((item: DropdownItem) => {\n    setStyleSettings({ ...styleSettings, sizeField: item.key });\n  }, [styleSettings]);\n  const handleOnChangeNameField = useCallback((item: DropdownItem) => {\n    setStyleSettings({ ...styleSettings, nameField: item.key });\n  }, [styleSettings]);\n  const handleOnChangeOpacity = useCallback((newOpacity: number) => {\n    setStyleSettings({ ...styleSettings, opacity: newOpacity });\n  }, [styleSettings]);\n\n  return (\n    <>\n      <div className={styles.filterTitle}>\n        Styling parameters\n      </div>\n      <div className={styles.paramsGrid}>\n        <div className={styles.paramTitle}>Color Field</div>\n        <DropDownInput\n          itemsList={dropdownItems}\n          selected={{ key: styleSettings.colorField ?? dropdownItems[0].key }}\n          onChange={handleOnChangeColorField}\n          label=\"Color Field\"\n          error=\"\"\n        />\n        <div className={styles.paramTitle}>Size Field</div>\n        <DropDownInput\n          itemsList={dropdownItems}\n          selected={{ key: styleSettings.sizeField ?? dropdownItems[0].key }}\n          onChange={handleOnChangeSizeField}\n          label=\"Size Field\"\n          error=\"\"\n        />\n        <div className={styles.paramTitle}>Opacity</div>\n        <Slider\n          defaultValue={1}\n          max={1}\n          min={0}\n          value={styleSettings.opacity ?? 1}\n          onChange={handleOnChangeOpacity}\n          step={0.01}\n        />\n        <div className={styles.paramTitle}>Name Field</div>\n        <DropDownInput\n          itemsList={dropdownItems}\n          selected={{ key: styleSettings.nameField ?? dropdownItems[0].key }}\n          onChange={handleOnChangeNameField}\n          label=\"Name Field\"\n          error=\"\"\n        />\n      </div>\n    </>\n  );\n}\n\nconst TSneParams: React.FC = () => {\n  const { tsneParams, setTsneParams } = usePlotContext();\n\n  const [epsilon, setEpsilon] = useState(tsneParams.epsilon);\n  const [perplexity, setPerplexity] = useState(tsneParams.perplexity);\n  const [numSteps, setNumSteps] = useState(tsneParams.numSteps);\n  const [costThreshold, setCostThreshold] = useState(tsneParams.costThreshold);\n\n  const handleOnClickRefitButton = () => {\n    setTsneParams({\n      ...tsneParams,\n      epsilon,\n      perplexity,\n      numSteps,\n      costThreshold,\n    } as ITsneParams);\n  }\n\n  return <>\n    <div className={styles.filterTitle}>\n      T-SNE parameters\n    </div>\n    <div className={styles.paramsGrid}>\n      <div className={styles.paramTitle}>Epsilon</div>\n      <Slider\n        defaultValue={50}\n        max={100}\n        min={0}\n        value={epsilon}\n        onChange={setEpsilon}\n        step={0.5}\n      />\n      <div className={styles.paramTitle}>Perplexity</div>\n      <Slider\n        defaultValue={50}\n        max={100}\n        min={0}\n        value={perplexity}\n        onChange={setPerplexity}\n      />\n      <div className={styles.paramTitle}>Steps number</div>\n      <Input value={numSteps}\n             onChange={(v) => setNumSteps(parseInt(v))}/>\n      <div className={styles.paramTitle}>Cost threshold</div>\n      <Slider\n        defaultValue={50}\n        max={100}\n        min={1}\n        value={costThreshold}\n        onChange={setCostThreshold}\n        step={0.5}\n      />\n\n      <BlankButton\n        className={styles.refitButton}\n        onClick={handleOnClickRefitButton}\n      >\n        Refit\n      </BlankButton>\n    </div>\n  </>\n}\nexport default SettingsOverlayModule;\n","import React from \"react\";\nimport ScatterPlot from \"../../scatterPlot/ScatterPlot\";\nimport Layout from \"../Layout\";\nimport SettingsOverlayModule from \"../SettingsOverlayModule\";\n\nconst TsneGraphView: React.FC = () => {\n\treturn (\n\t\t<Layout>\n\t\t\t<ScatterPlot />\n\t\t\t<SettingsOverlayModule />\n\t\t</Layout>\n\t);\n}\n\nexport default TsneGraphView;\n","import React, { ChangeEvent, useEffect } from \"react\";\nimport { usePlotContext } from \"../../contexts/PlotContext\";\nimport Layout from \"../Layout\";\nimport styles from \"./UploadCsvPage.module.scss\";\nimport Slider from \"../common/Slider\";\n\nconst UploadCsvPage: React.FC = () => {\n\tlet fileInputRef: HTMLInputElement | null = null;\n\n\tconst { setCsvFile } = usePlotContext();\n\n\tconst handleFiles = (e: ChangeEvent<HTMLInputElement>) => {\n\t\tif (e.target.files) {\n\t\t\tsetCsvFile(e.target.files[0]);\n\t\t}\n\t}\n\n\treturn (\n\t\t<Layout>\n\t\t\t<div className={styles.container}>\n\t\t\t\t<input\n\t\t\t\t\tref={(ref) => (fileInputRef = ref)}\n\t\t\t\t\ttype=\"file\"\n\t\t\t\t\thidden\n\t\t\t\t\taccept=\".csv\"\n\t\t\t\t\tonChange={handleFiles}\n\t\t\t\t/>\n\t\t\t\t<button\n\t\t\t\t\tclassName={styles.csvButton}\n\t\t\t\t\tonClick={() => fileInputRef?.click()}\n\t\t\t\t>\n\t\t\t\t\tUpload CSV\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</Layout>\n\t);\n}\n\nexport default UploadCsvPage;\n","import * as React from \"react\";\nimport {useEffect} from \"react\";\nimport {BrowserRouter, Navigate, Route, Routes, useNavigate, useLocation } from \"react-router-dom\";\nimport TsneGraphView from \"./TsneGraphView\";\nimport UploadCsvPage from \"./UploadCsvPage\";\nimport {PreprocessingStatus, usePlotContext} from \"../../contexts/PlotContext\";\n\nexport const UPLOAD_CSV = \"upload_csv\";\nexport const GRAPH_VIEW = \"graph\";\n\nexport const Router = (): React.ReactElement => {\n\treturn (\n\t\t<BrowserRouter>\n\t\t\t<PagePicker />\n\t\t</BrowserRouter>\n\t);\n};\n\nfunction PagePicker() {\n\tconst {preprocessingState} = usePlotContext();\n\tconst navigate = useNavigate();\n\tconst location = useLocation();\n\n\tuseEffect(() => {\n\t\tif (preprocessingState.status === PreprocessingStatus.COMPLETED) {\n\t\t\tnavigate(GRAPH_VIEW);\n\t\t} else if (location.pathname.includes(GRAPH_VIEW)) {\n\t\t\tnavigate(UPLOAD_CSV);\n\t\t}\n\t}, [preprocessingState]);\n\treturn (\n\t\t<Routes>\n\t\t\t<Route path={UPLOAD_CSV} element={<UploadCsvPage />} />\n\t\t\t<Route path={GRAPH_VIEW + \"/*\"} element={<TsneGraphView />} />\n\t\t\t<Route path=\"/\" element={<Navigate to={UPLOAD_CSV} />} />\n\t\t</Routes>\n\t);\n}\n","import React, {useEffect} from 'react';\nimport './App.css';\nimport {Router} from \"./components/pages/Router\";\nimport PlotContextContainer from \"./contexts/PlotContext\";\nimport {updateColorTheme} from \"./helpers/themeHelper\";\n\nfunction App() {\n    useEffect(() => {\n        updateColorTheme();\n    }, []);\n  return (\n    <div className=\"App\">\n      <PlotContextContainer>\n        <Router />\n      </PlotContextContainer>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"BlankButton_button__SL-sV\",\"disabled\":\"BlankButton_disabled__3W6ak\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"slider\":\"Slider_slider__3P0Id\",\"track\":\"Slider_track__3IJP5\",\"thumb\":\"Slider_thumb__160Qs\"};"],"sourceRoot":""}