{"version":3,"sources":["components/pages/UploadCsvPage.module.scss","components/SettingsOverlayModule.module.scss","components/Layout.module.scss","components/common/Input.module.scss","components/common/ThemeToggle.module.scss","components/common/DropDownInput.module.scss","preprocessing/isEmptyValue.ts","scatterPlot/plotHelpers.ts","scatterPlot/PlotBuilder.ts","preprocessing/dropDefaultColumns.ts","dfMetadata/getDfMetadata.ts","runTsne.worker.ts","contexts/PlotContext.tsx","preprocessing/getOriginalDf.ts","preprocessing/dropEmptyColumns.ts","preprocessing/encodeStringValues.ts","preprocessing/replaceEmptyValues.ts","preprocessing/dfToArray.ts","helpers/throttle.ts","scatterPlot/ScatterPlot.tsx","components/Layout.tsx","components/icons/SettingsIcon.tsx","helpers/classNames.ts","components/common/BlankButton.tsx","components/common/Slider.tsx","components/icons/DropDownIcon.tsx","components/common/DropDownInput.tsx","helpers/useClickOutside.tsx","components/common/Input.tsx","helpers/themeHelper.ts","components/common/ThemeToggle.tsx","components/SettingsOverlayModule.tsx","components/pages/TsneGraphView.tsx","components/pages/UploadCsvPage.tsx","components/pages/Router.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/common/BlankButton.module.scss","components/common/Slider.module.scss"],"names":["module","exports","isEmptyValue","value","undefined","isNaN","colorGenerator","deg","step","getColorByHue","hue","ColorManager","gen","map","this","NaN","parseInt","next","StyleManager","colorManager","styleSettings","dfMetadata","getScaledValue","type","field","foundMetadata","find","rowMetadata","columnName","minV","minValue","maxV","maxValue","scaledMinV","scaledMaxV","COLOR_SCALED_RANGE","SIZE_SCALED_RANGE","setSettings","reset","setDfMetadata","getPointRadius","d","sizeField","getPointText","nameField","getPointColor","colorField","scaledV","getColor","getPointOpacity","opacity","DOT_CLASS","defaultMargin","top","left","bottom","right","PlotBuilder","styleM","svg","mainG","xScale","d3","yScale","lineFunction","margin","height","width","handleMouseOver","e","emit","handleMouseOut","setupZooming","ref","options","current","append","style","background","attr","zoom","on","transform","Math","sqrt","k","selectAll","call","xRange","yRange","domain","range","x","y","curve","selector","remove","data","gDots","enter","X","Y","EventEmitter","DEFAULT_COLUMNS_TO_DROP","getDfMetadata","df","rowsMetadata","getColumns","forEach","column","arrValues","series","toArray","push","name","min","apply","max","Worker_fn","Worker","PreprocessingStatus","PREPROCESSING_PIPELINE","func","statusToChange","REMOVING_DEFAULT_COLUMNS","dropSeries","REMOVING_EMPTY_COLUMNS","columnNames","getColumnNames","jsonDf","JSON","parse","toJSON","emptyColumnNames","cName","every","row","ENCODING_STRING_VALUES","dfTypes","detectTypes","modifiedDf","encoder","jsmlt","LabelEncoder","Type","columnArray","getSeries","Column","encodedColumn","Series","encode","withSeries","REPLACE_EMPTY_VALUES","index","fromJSON","stringify","COMPLETED","PlotContext","React","createContext","usePlotContext","useContext","PlotContextContainer","props","funcs","tsneWorker","TsneWorker","setStyleSettings","setState","setCsvFile","file","csvFile","fileToDataFrame","setTsneParams","newTsneParams","tsneParams","terminate","initTsneWorker","runTsneSteps","a","state","text","csvFileText","console","log","fromCSV","dynamicTyping","originalDf","endAt","originalDfJson","preprocessDataFrame","preprocessedDf","cbFunc","length","preprocessingState","status","preprocessedDfColumns","preprocessedDfMetadata","dfData","Object","values","xData","Array","from","keys","postMessage","params","NOT_PARSED","epsilon","perplexity","numSteps","costThreshold","pointsRange","tsneStepResult","currentStep","currentCost","points","onmessage","event","stepResult","onTsneStepCompleted","result","Provider","children","Component","throttle","timeFrame","lastTime","Date","getTime","now","defaultOptions","ScatterPlot","useState","info","setInfo","svgRef","useRef","useEffect","setData","pointsWithCarInfo","point","rowId","xCoord","yCoord","carInfo","filter","f","updateCarData","updateDots","updateDotsData","init","updateScales","updateStyle","updateMetadata","color","position","pointerEvents","overflow","entries","key","Layout","className","styles","container","SettinsIcon","xmlns","fill","classNames","cls","v","join","BlankButton","link","onClick","title","disabled","restProps","href","button","Slider","defaultValue","onChange","ReactSlider","slider","thumbClassName","thumb","trackClassName","track","renderThumb","valueNow","DropDownIcon","EMPTY_DROPDOWN_ITEM","DropDownInput","itemsList","error","label","selected","smaller","isListHidden","setIsListHidden","dropDownRef","handler","domNodeRef","handleMouseDown","contains","target","document","addEventListener","removeEventListener","useClickOutside","handleSelect","useCallback","item","dropDownList","hiddenList","dropDownIcon","rotateIcon","dropDownWrapper","dropDownContainer","it","listItem","errorText","Input","wrapper","DARK","LIGHT","updateColorTheme","theme","getColorTheme","arrayOfVariableKeys","colors","arrayOfVariableValues","cssVariableKey","documentElement","setProperty","localStorage","getItem","includes","light","dark","ThemeToggle","isLight","setIsLight","setItem","toggleColorTheme","themeToggleContainer","viewBox","StyleParams","dropdownItems","setDropdownItems","dfKey","getChosenValue","handleOnChangeColorField","handleOnChangeSizeField","handleOnChangeOpacity","newOpacity","filterTitle","paramsGrid","paramTitle","TSneParams","setEpsilon","setPerplexity","setNumSteps","setCostThreshold","refitButton","SettingsOverlayModule","open","setOpen","o","settingsContainer","opened","TsneGraphView","UploadCsvPage","fileInputRef","hidden","accept","files","csvButton","click","GRAPH_VIEW","Router","PagePicker","navigate","useNavigate","location","useLocation","pathname","path","element","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.113f0ac0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"UploadCsvPage_container__2Kou4\",\"csvButton\":\"UploadCsvPage_csvButton__2AVTe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingsContainer\":\"SettingsOverlayModule_settingsContainer__1hhXP\",\"opened\":\"SettingsOverlayModule_opened__1pMgn\",\"button\":\"SettingsOverlayModule_button__2cMtM\",\"filterTitle\":\"SettingsOverlayModule_filterTitle__1C_sZ\",\"paramsGrid\":\"SettingsOverlayModule_paramsGrid__3BSBK\",\"paramTitle\":\"SettingsOverlayModule_paramTitle__Pmotw\",\"refitButton\":\"SettingsOverlayModule_refitButton__1NTO7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Layout_container__2g3W4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Input_wrapper__2BA42\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"themeToggleContainer\":\"ThemeToggle_themeToggleContainer__2qn_h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dropDownWrapper\":\"DropDownInput_dropDownWrapper__3I76e\",\"dropDownContainer\":\"DropDownInput_dropDownContainer__257KA\",\"smaller\":\"DropDownInput_smaller__1yw6h\",\"disabled\":\"DropDownInput_disabled__2yb-W\",\"dropDownIcon\":\"DropDownInput_dropDownIcon__1K1e-\",\"rotateIcon\":\"DropDownInput_rotateIcon__3Qq8G\",\"dropDownList\":\"DropDownInput_dropDownList__331fI\",\"hiddenList\":\"DropDownInput_hiddenList__1touR\",\"listItem\":\"DropDownInput_listItem__2Ph0D\"};","export function isEmptyValue(value: any): boolean {\n  return (\n    value === undefined ||\n    value === null ||\n    value === '' ||\n    (typeof value === 'number' && isNaN(value))\n  );\n}","import * as d3 from \"d3\";\nimport { ScaleLinear } from \"d3-scale\";\nimport { Line } from \"d3\";\nimport { DataRow } from \"./ScatterPlot\";\nimport { StyleSettings } from \"../helpers/types\";\nimport { IRowMetadata } from \"../dfMetadata/getDfMetadata\";\nimport { isEmptyValue } from \"../preprocessing/isEmptyValue\";\n\nexport const DEFAULT_FRAME: Frame = {\n  margin: { top: 10, right: 30, bottom: 30, left: 60 },\n  width: 460 - 60 - 30,\n  height: 400 - 10 - 30\n}\n\nexport type Frame = {\n  width: number;\n  height: number;\n  margin: { top: number, right: number, bottom: number, left: number },\n}\n\nexport default function formatDataToDots(data: Array<DataRow>): Array<[number, number]> {\n  return data.map(d => [d.X, d.Y]);\n}\n\nexport function scaledLine(\n  xScale: ScaleLinear<any, any>,\n  yScale: ScaleLinear<any, any>\n): Line<any> {\n  return d3\n    .line()\n    .x((d) => xScale(d[0]))\n    .y((d) => yScale(d[1]))\n    .curve(d3.curveMonotoneX);\n}\n\nexport function* colorGenerator(): Generator<string, string, number> {\n  let deg = 0;\n  let step = 360;\n  // @ts-ignore\n  let value = yield null;\n  yield getColorByHue(value || deg);\n  let i = 0;\n  while (true) {\n    i++;\n    deg += step;\n    if (deg >= 360) {\n      step = step / 2;\n      deg = step / 2;\n    }\n    // @ts-ignore\n    let value = yield null;\n    yield getColorByHue(value || deg);\n  }\n}\n\nexport function getColorByHue(hue: number): string {\n  return `hsl(${hue}, 70%, 60%)`;\n}\n\nexport function getRandomColor(): string {\n  return `hsl(${Math.floor(Math.random() * 360)}, 70%, 60%)`;\n}\n\nexport class ColorManager {\n  private gen: Generator<string, string, number>;\n  private map: { [key: string | number]: string };\n  constructor() {\n    this.gen = colorGenerator();\n    this.map = {};\n  }\n\n  getColor(value: string | number) {\n    if (!this.map[value]) {\n      if (parseInt(value + \"\") !== NaN) {\n        this.map[value] = this.gen.next(parseInt(value + \"\")).value;\n      } else {\n        this.map[value] = this.gen.next().value;\n      }\n    }\n    return this.map[value];\n  }\n\n  reset() {\n    this.map = {};\n    this.gen = colorGenerator();\n  }\n}\n\nexport class StyleManager {\n  private static COLOR_SCALED_RANGE: [number, number] = [90, 270];\n  private static SIZE_SCALED_RANGE: [number, number] = [1, 10];\n\n  private colorManager = new ColorManager();\n  private styleSettings: StyleSettings = {};\n  private dfMetadata: IRowMetadata[] = [];\n\n  constructor() {\n    this.styleSettings = {};\n  }\n\n  private getScaledValue = (\n    type: 'color' | 'size',\n    field: string | undefined,\n    value: any\n  ): any => {\n    if (!field || isEmptyValue(value) || typeof value === 'string') {\n      return type === \"size\" ? 1.51 : value;\n    }\n\n    const foundMetadata: IRowMetadata | undefined = this.dfMetadata.find(\n      (rowMetadata: IRowMetadata) => (rowMetadata.columnName === field),\n    );\n    if (foundMetadata === undefined) {\n      return value;\n    }\n\n    const minV: number = foundMetadata.minValue;\n    const maxV: number = foundMetadata.maxValue;\n\n    let scaledMinV: number = 0;\n    let scaledMaxV: number = 1;\n\n    switch (type) {\n      case 'color':\n        scaledMinV = StyleManager.COLOR_SCALED_RANGE[0];\n        scaledMaxV = StyleManager.COLOR_SCALED_RANGE[1];\n        break;\n      case 'size':\n        scaledMinV = StyleManager.SIZE_SCALED_RANGE[0];\n        scaledMaxV = StyleManager.SIZE_SCALED_RANGE[1];\n        break;\n      default:\n        break;\n    };\n\n    return ((value - minV) / (maxV - minV)) * (scaledMaxV - scaledMinV) + scaledMinV;\n  }\n\n  setSettings = (styleSettings: StyleSettings) => {\n    this.styleSettings = styleSettings || {};\n    this.colorManager.reset();\n  }\n\n  setDfMetadata = (dfMetadata: IRowMetadata[]) => {\n    this.dfMetadata = dfMetadata;\n  }\n\n  getPointRadius = (d: any) => {\n    const { sizeField } = this.styleSettings;\n    return (\n      // @ts-ignore\n      this.getScaledValue('size', sizeField, d[sizeField]) || 1.51\n    );\n  }\n\n  getPointText = (d: any) => {\n    const { nameField } = this.styleSettings;\n    // @ts-ignore\n    return d[nameField];\n  }\n\n  getPointColor = (d: any) => {\n    const { colorField } = this.styleSettings;\n    // @ts-ignore\n    const scaledV: any = this.getScaledValue('color', colorField, d[colorField]);\n\n    return this.colorManager.getColor(scaledV);\n  }\n\n  getPointOpacity = (d: any) => {\n    const { opacity } = this.styleSettings;\n    // @ts-ignore\n    return opacity || 1;\n  }\n\n  reset = () => {\n    this.colorManager.reset();\n  }\n}\n","import { RefObject } from \"react\";\nimport { Selection } from \"d3\";\nimport * as d3 from \"d3\";\nimport { DataRow } from \"./ScatterPlot\";\nimport { scaledLine, StyleManager } from \"./plotHelpers\";\nimport { StyleSettings } from \"../helpers/types\";\nimport { IRowMetadata } from \"../dfMetadata/getDfMetadata\";\nimport { EventEmitter } from \"events\";\n\n\nconst DOT_CLASS = \"dot\";\ntype Options = {\n  width: number;\n  height: number;\n  background?: string;\n  stroke?: string;\n  margin?: { top: number; left: number; bottom: number; right: number };\n};\n\nconst defaultMargin = { top: 0, left: 0, bottom: 0, right: 0 };\n\nexport default class PlotBuilder extends EventEmitter {\n  private styleM = new StyleManager();\n  private svg: Selection<Element, any, HTMLElement, any> | undefined;\n  private mainG: Selection<SVGGElement, any, HTMLElement, any> | undefined;\n  private xScale = d3.scaleLinear();\n  private yScale = d3.scaleLinear();\n  private lineFunction = d3.line();\n  private margin = defaultMargin;\n  private height = 0;\n  private width = 0;\n\n  updateStyle(styleSettings: StyleSettings) {\n    this.styleM.setSettings(styleSettings);\n    this.setupZooming();\n  }\n\n  updateMetadata(dfMetadata: IRowMetadata[]) {\n    this.styleM.setDfMetadata(dfMetadata);\n  }\n\n  init(ref: RefObject<any>, options: Options): void {\n    this.svg = d3.select<Element, any>(ref.current);\n    this.mainG = this.svg.append('g');\n    this.svg.style(\"background\", options.background || \"transparent\");\n    this.svg.attr(\"height\", \"auto\");\n    this.svg.attr(\"width\", \"100%\");\n    this.svg.attr(\"viewBox\", `0 0 ${options.width} ${options.height}`);\n    this.margin = options.margin || defaultMargin;\n    this.width = options.width - this.margin.left - this.margin.right;\n    this.height = options.height - this.margin.top - this.margin.bottom;\n\n    this.setupZooming();\n  }\n\n  setupZooming() {\n    const zoom = d3.zoom().on(\"zoom\", e => {\n      d3.select('svg g').attr(\"transform\", (e.transform));\n      this.svg?.style(\"stroke-width\", 3 / Math.sqrt(e.transform.k));\n      this.svg?.selectAll(\"circle\").attr(\"r\", (d) => this.styleM.getPointRadius(d) / Math.sqrt(e.transform.k));\n      this.svg?.selectAll(`.${DOT_CLASS} text`).style(\"font-size\", 5 / Math.sqrt(e.transform.k));\n    });\n\n    this.svg?.call(zoom);\n  }\n\n  updateScales(xRange: [number, number], yRange: [number, number]): void {\n    this.xScale = d3\n      .scaleLinear()\n      .domain([xRange[0], xRange[1]])\n      .range([this.margin.left, this.width]);\n    this.yScale = d3\n      .scaleLinear()\n      .domain([yRange[0], yRange[1]])\n      .range([this.height, this.margin.bottom]);\n    this.lineFunction = scaledLine(this.xScale, this.yScale);\n  }\n\n  remove(selector: string): void {\n    this.svg?.selectAll(selector).remove();\n  }\n\n  updateDots(\n    data: Array<DataRow>,\n  ): void {\n    this.remove(\".\" + DOT_CLASS);\n    const gDots = this.mainG?.selectAll(DOT_CLASS)\n      .data(data)\n      .enter()\n      .append('g')\n      .attr(\"class\", DOT_CLASS);\n    gDots?.append(\"circle\")\n      .attr(\"cx\", (d) => {\n        return this.xScale(d.X)\n      }).on(\"mouseover\", this.handleMouseOver)\n        .on(\"mouseout\", this.handleMouseOut)\n      .attr(\"cy\", (d) => { return this.yScale(d.Y) })\n      .attr(\"r\", this.styleM.getPointRadius)\n      .style(\"opacity\", this.styleM.getPointOpacity)\n      .style(\"fill\", this.styleM.getPointColor);\n  }\n\n  setUpAxis(): void {\n    if (!this.mainG) {\n      return;\n    }\n    const xAxis = this.mainG\n      .append(\"g\")\n      .attr(\"transform\", \"translate(0,\" + this.height + \")\")\n      .attr(\"class\", \"axis axis--x\")\n      .call(d3.axisBottom(this.xScale))\n      .style(\"color\", \"transparent\");\n\n    xAxis.selectAll(\"text\").style(\"fill\", \"#59536B\");\n\n    const yAxis = this.mainG\n      .append(\"g\")\n      .attr(\"transform\", \"translate(\" + this.margin.left + \", 0)\")\n      .attr(\"class\", \"axis axis--y\")\n      .call(d3.axisLeft(this.yScale))\n      .style(\"color\", \"transparent\");\n\n    yAxis.selectAll(\"text\").style(\"fill\", \"#59536B\");\n  }\n\n  handleMouseOver = (e:any, d: any) => {\n    this.emit(\"show-info\", d);\n  }\n\n  handleMouseOut = (d: any) => {\n    this.emit(\"hide-info\");\n  }\n}\n","import { IDataFrame, IFieldRecord } from \"data-forge\";\n\nconst DEFAULT_COLUMNS_TO_DROP: string[] = [\"id\", \"Id\", \"ID\"];\n\nexport function dropDefaultColumns(df: IDataFrame<number, IFieldRecord>): IDataFrame<number, IFieldRecord> {\n  return df.dropSeries(DEFAULT_COLUMNS_TO_DROP);\n}","import { IDataFrame, IFieldRecord, ISeries } from \"data-forge\";\nimport { IColumn } from \"data-forge/build/lib/dataframe\";\n\nexport interface IRowMetadata {\n  columnName: string;\n  minValue: number;\n  maxValue: number;\n}\n\nexport function getDfMetadata(df: IDataFrame<number, IFieldRecord>): IRowMetadata[] {\n  const rowsMetadata: IRowMetadata[] = [];\n\n  const columns: ISeries<number, IColumn> = df.getColumns();\n  columns.forEach((column: IColumn) => {\n    const arrValues: number[] = column.series.toArray();\n\n    rowsMetadata.push({\n      columnName: column.name,\n      minValue: Math.min.apply(null, arrValues),\n      maxValue: Math.max.apply(null, arrValues),\n    } as IRowMetadata);\n  });\n\n  return rowsMetadata;\n} ","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/runTsne.worker.f4604769.worker.js\");\n}\n","import React, { useContext } from \"react\";\nimport { DataFrame, fromCSV, IDataFrame, IFieldRecord } from \"data-forge\";\nimport {\n  getOriginalDf,\n  dropDefaultColumns,\n  dropEmptyColumns,\n  encodeStringValues,\n  replaceEmptyValues,\n  dfToArray,\n} from \"../preprocessing\";\nimport {\n  IRowMetadata,\n  getDfMetadata\n} from \"../dfMetadata/getDfMetadata\";\nimport {\n  ITsneParams,\n  IDataRow,\n  ITsneStepResult,\n} from \"../tsneWrapper/TsneWrapper\";\nimport { StyleSettings } from \"../helpers/types\";\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport TsneWorker from 'worker-loader!../runTsne.worker';\n\nexport enum PreprocessingStatus {\n  NOT_PARSED,\n  REMOVING_DEFAULT_COLUMNS,\n  REMOVING_EMPTY_COLUMNS,\n  ENCODING_STRING_VALUES,\n  REPLACE_EMPTY_VALUES,\n  COMPLETED,\n}\n\nexport interface PreprocessingState {\n  status: PreprocessingStatus,\n  preprocessedDf: IDataFrame<number, IFieldRecord> | null,\n}\n\ninterface PreprocessingStep {\n  func: (df: IDataFrame<number, IFieldRecord>) => IDataFrame<number, IFieldRecord>,\n  statusToChange: PreprocessingStatus,\n}\n\ninterface PlotState {\n  csvFile: File | null;\n  originalDf: IDataFrame<number, IFieldRecord> | null,\n  originalDfJson: any[] | null,\n  preprocessingState: PreprocessingState,\n  preprocessedDfColumns: string[] | null,\n  preprocessedDfMetadata: IRowMetadata[] | null,\n  tsneParams: ITsneParams,\n  tsneStepResult: ITsneStepResult,\n  styleSettings: StyleSettings,\n}\n\ninterface PlotFuncs {\n  setCsvFile: (file: File | null) => void;\n  setStyleSettings: (style: StyleSettings) => void;\n  setTsneParams: (newTsneParams: ITsneParams) => void;\n}\n\ntype IPlotContext = PlotState & PlotFuncs;\n\nconst PREPROCESSING_PIPELINE: PreprocessingStep[] = [\n  { func: getOriginalDf, statusToChange: PreprocessingStatus.REMOVING_DEFAULT_COLUMNS },\n  { func: dropDefaultColumns, statusToChange: PreprocessingStatus.REMOVING_EMPTY_COLUMNS },\n  { func: dropEmptyColumns, statusToChange: PreprocessingStatus.ENCODING_STRING_VALUES },\n  { func: encodeStringValues, statusToChange: PreprocessingStatus.REPLACE_EMPTY_VALUES },\n  { func: replaceEmptyValues, statusToChange: PreprocessingStatus.COMPLETED },\n];\n\nconst PlotContext = React.createContext<IPlotContext | any>(null);\nexport const usePlotContext = (): IPlotContext =>\n  useContext<IPlotContext>(PlotContext);\n\nexport default class PlotContextContainer extends React.Component<\n  any,\n  PlotState\n> {\n  private readonly funcs: PlotFuncs;\n  private tsneWorker: TsneWorker = new TsneWorker();\n\n  constructor(props: Readonly<{}>) {\n    super(props);\n\n    this.state = {\n      csvFile: null,\n      originalDf: null,\n      originalDfJson: null,\n      preprocessingState: {\n        status: PreprocessingStatus.NOT_PARSED,\n        preprocessedDf: null,\n      },\n      preprocessedDfColumns: null,\n      preprocessedDfMetadata: null,\n      tsneParams: {\n        epsilon: 10,\n        perplexity: 30,\n        numSteps: 500,\n        costThreshold: 11,\n        pointsRange: {\n          x: [-1, 1],\n          y: [-1, 1],\n        },\n      },\n      tsneStepResult: {\n        currentStep: 0,\n        currentCost: 0,\n        points: [],\n      },\n      styleSettings: {} as StyleSettings,\n    };\n\n    this.funcs = {\n      setCsvFile: this.setCsvFile,\n      setStyleSettings: this.setStyleSettings,\n      setTsneParams: this.setTsneParams,\n    };\n  }\n\n  componentDidMount() {\n    this.initTsneWorker();\n  }\n\n  initTsneWorker() {\n    const onTsneStepCompleted = (stepResult: ITsneStepResult): void => {\n      this.setState({ tsneStepResult: stepResult });\n    }\n\n    this.tsneWorker.onmessage = function (event: MessageEvent<any>) {\n      const stepResult = event.data.result as ITsneStepResult;\n      onTsneStepCompleted(stepResult);\n    }\n  }\n\n  setStyleSettings = (styleSettings: StyleSettings) => {\n    this.setState({ styleSettings });\n  }\n\n  setCsvFile = (file: File | null) => {\n    this.setState({ csvFile: file }, this.fileToDataFrame);\n  }\n\n  setTsneParams = (newTsneParams: ITsneParams): void => {\n    this.setState(\n      { tsneParams: newTsneParams },\n      () => {\n        this.tsneWorker.terminate();\n\n        this.tsneWorker = new TsneWorker();\n        this.initTsneWorker();\n        this.runTsneSteps();\n      }\n    );\n  }\n\n  fileToDataFrame = async (): Promise<void> => {\n    if (this.state.csvFile === null) {\n      return;\n    }\n\n    const csvFileText: string | undefined = await this.state.csvFile?.text();\n    if (csvFileText === undefined) {\n      console.log('Error: No text from CSV file');\n      return;\n    }\n\n    const df: DataFrame<number, any> = fromCSV(csvFileText, { dynamicTyping: true });\n\n    this.setState(\n      {\n        // TODO: for short demo\n        originalDf: (df.endAt(2000) as DataFrame<number, any>),\n        originalDfJson: df.endAt(2000).toArray(),\n        // TODO: for full presentation\n        // originalDf: df,\n        // originalDfJson: df.toArray(),\n      },\n      this.preprocessDataFrame\n    );\n  }\n\n  preprocessDataFrame = (): void => {\n    if (this.state.originalDf === null) {\n      return;\n    }\n\n    const { originalDf } = this.state;\n    let preprocessedDf: IDataFrame<number, IFieldRecord> = originalDf;\n    PREPROCESSING_PIPELINE.forEach((step: PreprocessingStep, index: number) => {\n      const { func, statusToChange } = step;\n\n      preprocessedDf = func(preprocessedDf);\n\n      const cbFunc = (index === PREPROCESSING_PIPELINE.length - 1)\n        ? this.runTsneSteps\n        : () => {};\n\n      this.setState(\n        { preprocessingState: { status: statusToChange, preprocessedDf }},\n        cbFunc\n      );\n    });\n  }\n\n  runTsneSteps = (): void => {\n    const { status, preprocessedDf } = this.state.preprocessingState;\n    if (status !== PreprocessingStatus.COMPLETED || !preprocessedDf) {\n      return;\n    }\n\n    this.setState({\n      preprocessedDfColumns: preprocessedDf.getColumnNames(),\n      preprocessedDfMetadata: getDfMetadata(preprocessedDf)\n    });\n\n    const dfData: IDataRow[] = dfToArray(preprocessedDf);\n    const xData: number[] = Array.from(Array(dfData.length).keys());\n\n    this.tsneWorker.postMessage({\n      params: this.state.tsneParams,\n      xData,\n      dfData,\n    });\n  }\n\n  render(): React.ReactNode {\n    return (\n      <PlotContext.Provider value={{ ...this.state, ...this.funcs }}>\n        {this.props.children}\n      </PlotContext.Provider>\n    );\n  }\n}\n","import { IDataFrame, IFieldRecord } from \"data-forge\";\n\nexport function getOriginalDf(df: IDataFrame<number, IFieldRecord>): IDataFrame<number, IFieldRecord> {\n  return df;\n}","import { IDataFrame, IFieldRecord } from \"data-forge\";\nimport { isEmptyValue } from \"./isEmptyValue\";\n\nexport function dropEmptyColumns(df: IDataFrame<number, IFieldRecord>): IDataFrame<number, IFieldRecord> {\n  const columnNames: string[] = df.getColumnNames();\n  const jsonDf: any[] = JSON.parse(df.toJSON());\n\n  const emptyColumnNames: string[] = [];\n  columnNames.forEach((cName: string) => {\n    const isColumnEmpty: boolean = jsonDf.every((row: any) => isEmptyValue(row[cName]));\n\n    if (isColumnEmpty) {\n      emptyColumnNames.push(cName);\n    }\n  });\n\n  return df.dropSeries(emptyColumnNames);\n}","import { IDataFrame, IFieldRecord, Series } from \"data-forge\";\nimport * as jsmlt from '@jsmlt/jsmlt'\n\nexport function encodeStringValues(df: IDataFrame<number, IFieldRecord>): IDataFrame<number, IFieldRecord> {\n\tconst dfTypes = df.detectTypes();\n\n\tlet modifiedDf: IDataFrame<number, IFieldRecord> = df;\n\tconst encoder = new jsmlt.Preprocessing.LabelEncoder();\n\tdfTypes.forEach((row) => {\n\t\tif (row.Type !== 'string') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst columnArray: string[] = df.getSeries(row.Column).toArray();\n\t\tconst encodedColumn: Series = new Series(encoder.encode(columnArray));\n\t\t\n\t\tmodifiedDf = modifiedDf.dropSeries(row.Column);\n\t\tmodifiedDf = modifiedDf.withSeries({ [row.Column]: encodedColumn });\n\t});\n\n\treturn modifiedDf;\n}","import { IDataFrame, IFieldRecord, fromJSON } from \"data-forge\";\nimport { isEmptyValue } from \"./isEmptyValue\";\n\nconst EMPTY_VALUE_TO_REPLACE: number = -1;\n\nexport function replaceEmptyValues(df: IDataFrame<number, IFieldRecord>): IDataFrame<number, IFieldRecord> {\n  const columnNames: string[] = df.getColumnNames();\n  const jsonDf: any[] = JSON.parse(df.toJSON());\n\n  columnNames.forEach((cName: string) => {\n    jsonDf.forEach((row: any, index: number) => {\n      if (isEmptyValue(row[cName])) {\n        jsonDf[index][cName] = EMPTY_VALUE_TO_REPLACE;\n      }\n    });\n  });\n\n  return fromJSON(JSON.stringify(jsonDf));\n}\n","import { IDataFrame, IFieldRecord } from \"data-forge\";\nimport { IDataRow } from \"../tsneWrapper/TsneWrapper\";\n\nexport function dfToArray(df: IDataFrame<number, IFieldRecord>): IDataRow[] {\n  const rows: IFieldRecord[] = df.toArray();\n  return rows.map(\n    (row: IFieldRecord) => Object.values(row)\n  );\n}","// https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore#_throttle\nexport function throttle(func: any, timeFrame: number) {\n  let lastTime: number = new Date(0).getTime();\n  return (...args: any) => {\n    const now = new Date().getTime();\n    if (now - lastTime >= timeFrame) {\n      func(...args);\n      lastTime = now;\n    }\n  };\n}","import React, { ReactElement, useEffect, useRef, useState } from \"react\";\nimport PlotBuilder from \"./PlotBuilder\";\nimport \"./ScatterPlot.css\";\nimport { usePlotContext } from \"../contexts/PlotContext\";\nimport { throttle } from \"../helpers/throttle\";\n\ninterface Props { }\n\nconst defaultOptions = {\n  width: 600,\n  height: 400,\n  // background: \"#d3d3d3\",\n  margin: { top: 10, left: 30, bottom: 10, right: 10 },\n};\n\nexport type DataRow = {\n  [key: string]: number | string;\n  X: number,\n  Y: number,\n}\nexport default function ScatterPlot(props: Props): ReactElement {\n  const {\n    styleSettings,\n    originalDfJson,\n    tsneParams,\n    tsneStepResult,\n    preprocessedDfMetadata,\n  } = usePlotContext();\n\n  const [info, setInfo] = useState(undefined);\n  const svgRef = useRef(null);\n  const ref = useRef<PlotBuilder>(new PlotBuilder());\n  useEffect(() => {\n    ref.current.on(\"show-info\", (d) => setInfo(d));\n    // ref.current.on(\"jide-info\", () => setInfo(undefined));\n  }, [ref]);\n\n  const [data, setData] = useState<DataRow[]>();\n\n  const updateCarData = () => {\n    const { points } = tsneStepResult;\n\n    const pointsWithCarInfo: DataRow[] = points.map((point) => {\n      const { rowId, xCoord, yCoord } = point;\n      const carInfo = originalDfJson ? originalDfJson[rowId] : undefined;\n\n      return (\n        carInfo && {\n          ...carInfo,\n          X: xCoord,\n          Y: yCoord,\n        }\n      );\n    }).filter(f => f);\n    setData(pointsWithCarInfo);\n  }\n\n  const updateDotsData = (data: DataRow[] | undefined) => {\n    if (data) {\n      ref.current.updateDots(data);\n    }\n  }\n\n  useEffect(throttle(() => updateCarData(), 500), [tsneStepResult]);\n\n  useEffect(throttle(() => updateDotsData(data), 2000), [data]);\n\n  useEffect(() => {\n    ref.current.init(svgRef, defaultOptions);\n    ref.current.updateScales(\n      tsneParams.pointsRange.x,\n      tsneParams.pointsRange.y,\n    );\n  }, []);\n\n  useEffect(() => {\n    if (data) {\n      ref.current.updateStyle(styleSettings);\n      ref.current.updateDots(data);\n    }\n  }, [styleSettings]);\n\n  useEffect(() => {\n    if (preprocessedDfMetadata) {\n      ref.current.updateMetadata(preprocessedDfMetadata);\n    }\n  }, [preprocessedDfMetadata]);\n\n  return <>\n    {info && <div style={{\n      color: \"#69b3a2\",\n      position: \"fixed\",\n      pointerEvents: \"none\",\n      width: \"20rem\",\n      overflow: \"hidden\"\n    }}>\n      {Object.entries(info).map(([key, value]) => {\n        return <div>\n          {key}: {JSON.stringify(value)}\n        </div>\n      })}\n    </div>}\n    <svg ref={svgRef} height={\"100%\"} />\n    </>;\n}\n","import React from \"react\";\nimport styles from \"./Layout.module.scss\";\n\nconst Layout: React.FC = (props) => {\n\tconst { children } = props;\n\treturn (\n\t\t<div className={styles.container}>\n\t\t\t{children}\n\t\t</div>\n\t);\n}\n\nexport default Layout;\n","import React from \"react\";\n\nfunction SettinsIcon() {\n    return (\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\">\n            <path\n                fill=\"#97E0CA\"\n                d=\"M23.463 9.957l-2.807-.68a9.089 9.089 0 00-.59-1.429l1.44-2.4a.703.703 0 00-.106-.859L19.41 2.6a.703.703 0 00-.858-.105l-2.4 1.44a9.089 9.089 0 00-1.428-.59L14.043.536A.703.703 0 0013.359 0h-2.812a.703.703 0 00-.683.537l-.682 2.807a9.096 9.096 0 00-1.427.59l-2.4-1.44a.703.703 0 00-.86.106L2.507 4.59a.703.703 0 00-.106.858l1.44 2.4A9.09 9.09 0 003.25 9.28l-2.717.68a.703.703 0 00-.533.68v2.812c0 .323.22.604.533.682l2.717.68c.157.495.354.973.59 1.43l-1.44 2.4a.703.703 0 00.107.86l1.988 1.988a.703.703 0 00.86.106l2.4-1.44c.457.237.936.434 1.43.591l.68 2.717c.078.313.36.533.682.533h2.812c.323 0 .604-.22.682-.533l.68-2.717a9.092 9.092 0 001.43-.591l2.401 1.44c.277.166.63.122.859-.106l1.989-1.988a.703.703 0 00.105-.86l-1.44-2.4c.236-.456.434-.934.59-1.427l2.808-.682a.703.703 0 00.537-.683V10.64a.703.703 0 00-.537-.684zm-.87 2.943l-2.664.647a.703.703 0 00-.513.501 7.684 7.684 0 01-.77 1.862.703.703 0 00.006.713l1.365 2.275-1.212 1.213-2.275-1.365a.703.703 0 00-.714-.006 7.689 7.689 0 01-1.861.77.703.703 0 00-.5.508l-.645 2.576h-1.714l-.644-2.576a.703.703 0 00-.5-.508 7.684 7.684 0 01-1.862-.77.703.703 0 00-.714.006L5.101 20.11 3.89 18.898l1.365-2.275a.703.703 0 00.006-.713 7.683 7.683 0 01-.77-1.862.703.703 0 00-.508-.5l-2.576-.644V11.19l2.576-.644a.703.703 0 00.508-.5 7.684 7.684 0 01.77-1.862.703.703 0 00-.006-.714L3.89 5.195l1.212-1.212 2.276 1.365a.703.703 0 00.713.006 7.683 7.683 0 011.862-.77.703.703 0 00.501-.513l.647-2.665h1.707l.646 2.665a.7.7 0 00.502.513 7.684 7.684 0 011.86.77.703.703 0 00.715-.006l2.275-1.365 1.212 1.212-1.365 2.275a.703.703 0 00-.006.714c.335.58.594 1.205.77 1.862.066.248.263.44.513.501l2.665.646V12.9z\"\n            />\n            <path\n                fill=\"#97E0CA\"\n                d=\"M12 8c-2.206 0-4 1.794-4 4s1.794 4 4 4 4-1.794 4-4-1.794-4-4-4zm0 6.857A2.86 2.86 0 019.143 12 2.86 2.86 0 0112 9.143 2.86 2.86 0 0114.857 12 2.86 2.86 0 0112 14.857z\"\n            />\n        </svg>\n    );\n}\n\nexport default SettinsIcon;\n","export function classNames(...cls: Array<string | undefined | false>): string {\n\treturn cls\n\t\t.map((v) => {\n\t\t\tif (typeof v === \"undefined\" || v === false) {\n\t\t\t\t// ignore\n\t\t\t} else if (typeof v === \"string\") {\n\t\t\t\treturn v;\n\t\t\t} else if (!!v[1]) {\n\t\t\t\treturn v[0];\n\t\t\t}\n\t\t\treturn null;\n\t\t})\n\t\t.filter((v) => !!v)\n\t\t.join(\" \");\n}\n","import React, { CSSProperties } from \"react\";\n\nimport styles from \"./BlankButton.module.scss\";\nimport {classNames} from \"../../helpers/classNames\";\n\ntype BlankButtonProps = {\n  className?: string;\n  style?: CSSProperties;\n  title?: string;\n  disabled?: boolean;\n  onClick?: React.MouseEventHandler<HTMLButtonElement>;\n  link?: string;\n};\nconst BlankButton: React.FC<BlankButtonProps> = (props) => {\n  const {\n    link,\n    onClick,\n    title,\n    disabled,\n    className,\n    children,\n    ...restProps\n  } = props;\n  if (link) {\n    return (\n      <a\n        href={disabled ? undefined : link}\n        title={title}\n        style={props.style}\n        className={classNames(styles.button, className, disabled && styles.disabled)}\n        {...restProps}\n      >\n        {children}\n      </a>\n    );\n  }\n  return (\n    <button\n      onClick={onClick}\n      title={title}\n      disabled={disabled}\n      style={props.style}\n      className={classNames(styles.button, className)}\n      {...restProps}\n    >\n      {children}\n    </button>\n  );\n};\n\nexport default BlankButton;\n","import React from \"react\";\nimport ReactSlider from \"react-slider\";\nimport styles from \"./Slider.module.scss\";\n\ntype Props = {\n\tdefaultValue?: number;\n\tdisabled?: boolean;\n\tmax: number;\n\tmin: number;\n\tvalue: number;\n\tonChange: (value: number) => void;\n\tstep?: number;\n}\nconst Slider: React.FC<Props> = (props) => {\n\tconst {\n\t\tdefaultValue, disabled,\n\t\tmax, min, value, onChange,\n\t\tstep\n\t} = props;\n\n\treturn (\n\t\t<ReactSlider\n\t\t\tdefaultValue={defaultValue}\n\t\t\tdisabled={disabled}\n\t\t\tmax={max}\n\t\t\tmin={min}\n\t\t\tstep={step ?? 1}\n\t\t\tvalue={value}\n\t\t\tonChange={onChange}\n\t\t\tclassName={styles.slider}\n\t\t\tthumbClassName={styles.thumb}\n\t\t\ttrackClassName={styles.track}\n\t\t\trenderThumb={(props, state) => <div {...props}><span>{state.valueNow}</span></div>}\n\t\t/>);\n}\n\nexport default Slider;\n","import React from \"react\";\n\nconst DropDownIcon: React.FC<{className: string}> = (props) => {\n    return <span className={props.className}>v</span>\n}\nexport default DropDownIcon;\n","import React, { FC, useCallback, useState } from \"react\";\nimport DropDownIcon from \"../icons/DropDownIcon\";\nimport BlankButton from \"./BlankButton\";\nimport styles from \"./DropDownInput.module.scss\";\nimport {useClickOutside} from \"../../helpers/useClickOutside\";\nimport {classNames} from \"../../helpers/classNames\";\n\n\nexport function mapStringToItem(val: string): DropdownItem {\n  return { key: val };\n}\n\nexport type DropdownItem = { value?: any; key: string };\ntype DropDownInputProps = {\n  itemsList: Array<DropdownItem>;\n  onChange: (item: DropdownItem) => void;\n  className?: string;\n  label: string;\n  error: string;\n  selected: DropdownItem;\n  smaller?: boolean;\n};\n\nexport const EMPTY_DROPDOWN_ITEM: DropdownItem = { key: 'None' };\n\nconst DropDownInput: FC<DropDownInputProps> = (props) => {\n  const {\n    onChange,\n    itemsList,\n    className,\n    label,\n    error,\n    selected,\n    smaller,\n    ...restProps\n  } = props;\n  const [isListHidden, setIsListHidden] = useState(true);\n\n  const dropDownRef = useClickOutside(() => setIsListHidden(true));\n\n  const handleSelect = useCallback((item: DropdownItem): void => {\n    onChange(item);\n    setIsListHidden(true);\n  }, [isListHidden]);\n\n  const renderValueItems = () => {\n    const itemsListWithEmpty: DropdownItem[] = [\n      EMPTY_DROPDOWN_ITEM,\n      ...itemsList,\n    ];\n\n    return itemsListWithEmpty.map((it) => (\n      <BlankButton\n        className={styles.listItem}\n        key={it.key}\n        onClick={() => handleSelect(it)}\n      >\n        {it.value || it.key}\n      </BlankButton>\n    ));\n  };\n\n  const dropDownList = classNames(\n    styles.dropDownList,\n    isListHidden && styles.hiddenList,\n    smaller && styles.smaller\n  );\n  const dropDownIcon = classNames(\n    styles.dropDownIcon,\n    !isListHidden && styles.rotateIcon\n  );\n\n  const getFieldValue = () => {\n    return (\n      <div\n        ref={dropDownRef as React.RefObject<HTMLDivElement>}\n        className={styles.dropDownWrapper}\n      >\n        <BlankButton\n          onClick={() => setIsListHidden(!isListHidden)}\n          className={classNames(\n            styles.dropDownContainer,\n            smaller && styles.smaller\n          )}\n        >\n          {selected.value || selected.key || EMPTY_DROPDOWN_ITEM.key}\n          <DropDownIcon className={dropDownIcon} />\n        </BlankButton>\n\n        <div className={dropDownList}>\n          {renderValueItems()}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n      <div data-cy=\"input-wrapper\" {...restProps}>\n        {getFieldValue()}\n        {error && (\n          <span\n            className={styles.errorText}\n            title={error}\n            data-cy=\"input-error\"\n          >\n            {error}\n          </span>\n        )}\n      </div>\n  );\n};\n\nexport default DropDownInput;\n","import { RefObject, useEffect, useRef } from \"react\";\n\nexport const useClickOutside = (\n  handler: () => void\n): RefObject<HTMLElement> => {\n  const domNodeRef = useRef<HTMLElement>(null);\n  useEffect(() => {\n    const handleMouseDown = (event: MouseEvent) => {\n      if (!domNodeRef?.current?.contains(event.target as Element)) {\n        handler();\n      }\n    };\n    document.addEventListener(\"mousedown\", handleMouseDown);\n\n    return () => {\n      document.removeEventListener(\"mousedown\", handleMouseDown);\n    };\n  }, []);\n  return domNodeRef;\n};\n","import React, { FC } from \"react\";\nimport styles from \"./Input.module.scss\";\n\n\ntype InputProps = {\n  onChange: (val: string) => void;\n  className?: string;\n  value?: number;\n};\n\nconst Input: FC<InputProps> = (props) => {\n  const {\n    onChange,\n    value,\n  } = props;\n\n  return (\n      <input\n          className={styles.wrapper}\n          value={value}\n          onChange={(e) => onChange(e.target.value)}\n      />\n  );\n};\n\nexport default Input;\n","export const DARK = \"dark\";\nexport const LIGHT = \"light\";\n\nexport type Theme = \"dark\" | \"light\";\n\nexport function updateColorTheme(): void {\n  const theme = getColorTheme();\n  const arrayOfVariableKeys = Object.keys(colors);\n  const arrayOfVariableValues = Object.values(colors);\n\n  arrayOfVariableKeys.forEach((cssVariableKey, index) => {\n    document.documentElement.style.setProperty(\n      cssVariableKey,\n      arrayOfVariableValues[index][theme]\n    );\n  });\n}\n\nexport function toggleColorTheme(): Theme {\n  const cur = getColorTheme();\n  const theme = cur === LIGHT ? DARK : LIGHT;\n  localStorage.setItem(\"colorTheme\", theme);\n  updateColorTheme();\n  return theme;\n}\n\nexport function getColorTheme(): Theme {\n  const color = localStorage.getItem(\"colorTheme\") || \"\";\n  if (![DARK, LIGHT].includes(color)) {\n    return DARK;\n  }\n  return <Theme>color;\n}\n\ntype Colors = {\n  [key: string]: { dark: string; light: string };\n};\n\nconst colors: Colors = {\n\"--background\": {light: \"#DADADF\", dark: \"#34344A\"},\n\"--background-light\": {light: \"#FEFEFE\", dark: \"#48485C\"},\n\n\"--font\": {light: \"#7DC2C5\", dark: \"#7DC2C5\"},\n\"--grey-font\": {light: \"#34344A\", dark: \"#B7B6C1\"},\n\n\"--button-color\": {light: \"#9CFFFA\", dark: \"#7DC2C5\"},\n\"--button-font\": {light: \"#34344A\", dark: \"#FEFEFE\"},\n\n\"--sub-text\": {light: \"#929D9E\", dark: \"#929D9E\"},\n\"--accent-blue\": {light: \"#7DC2C5\", dark: \"#97E0CA\"},\n\n\"--border-color\": {light: \"#DADADF\", dark: \"#B7B6C1\"},\n\n\n\"--slider-track\": {light: \"#7DC2C5\", dark: \"#9CFFFA\"},\n\"--slider-dot\": {light: \"#7DC2C5\", dark: \"#7DC2C5\"},\n};\n","import React, {useState} from \"react\";\nimport styles from \"./ThemeToggle.module.scss\";\nimport BlankButton from \"./BlankButton\";\nimport {getColorTheme, LIGHT, toggleColorTheme} from \"../../helpers/themeHelper\";\n\nconst ThemeToggle: React.FC<{}> = (props) => {\n    const [isLight, setIsLight] = useState(getColorTheme() === LIGHT);\n    return (\n        <BlankButton\n            data-cy=\"theme-toggle\"\n            {...props}\n            onClick={() => {\n                setIsLight(toggleColorTheme() === LIGHT);\n            }}\n            className={styles.themeToggleContainer}\n        >\n            {isLight\n                ? <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    width=\"60\"\n                    height=\"60\"\n                    fill=\"none\"\n                    viewBox=\"0 0 60 60\"\n                >\n                    <path\n                        fill=\"#34344A\"\n                        d=\"M30 21a9 9 0 109 9c0-.46-.04-.92-.1-1.36a5.389 5.389 0 01-4.4 2.26 5.403 5.403 0 01-3.14-9.8c-.44-.06-.9-.1-1.36-.1z\"\n                    />\n                </svg>\n            : <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    width=\"60\"\n                    height=\"60\"\n                    fill=\"none\"\n                    viewBox=\"0 0 60 60\"\n                >\n                    <path\n                        fill=\"#ECECEF\"\n                        d=\"M30 25c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5zm-10 6h2c.55 0 1-.45 1-1s-.45-1-1-1h-2c-.55 0-1 .45-1 1s.45 1 1 1zm18 0h2c.55 0 1-.45 1-1s-.45-1-1-1h-2c-.55 0-1 .45-1 1s.45 1 1 1zm-9-11v2c0 .55.45 1 1 1s1-.45 1-1v-2c0-.55-.45-1-1-1s-1 .45-1 1zm0 18v2c0 .55.45 1 1 1s1-.45 1-1v-2c0-.55-.45-1-1-1s-1 .45-1 1zm-5.01-15.42a.996.996 0 00-1.41 0 .996.996 0 000 1.41l1.06 1.06c.39.39 1.03.39 1.41 0 .38-.39.39-1.03 0-1.41l-1.06-1.06zm12.37 12.37a.996.996 0 00-1.41 0 .996.996 0 000 1.41l1.06 1.06c.39.39 1.03.39 1.41 0a.996.996 0 000-1.41l-1.06-1.06zm1.06-10.96a.996.996 0 000-1.41.996.996 0 00-1.41 0l-1.06 1.06a.996.996 0 000 1.41c.39.38 1.03.39 1.41 0l1.06-1.06zM25.05 36.36a.996.996 0 000-1.41.996.996 0 00-1.41 0l-1.06 1.06a.996.996 0 000 1.41c.39.38 1.03.39 1.41 0l1.06-1.06z\"\n                    />\n                </svg>}\n        </BlankButton>\n    );\n};\n\nexport default ThemeToggle;\n\n","import SettinsIcon from \"./icons/SettingsIcon\";\nimport styles from \"./SettingsOverlayModule.module.scss\";\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { classNames } from \"../helpers/classNames\";\nimport BlankButton from \"./common/BlankButton\";\nimport Slider from \"./common/Slider\";\nimport { usePlotContext } from \"../contexts/PlotContext\";\nimport { ITsneParams } from \"../tsneWrapper/TsneWrapper\";\nimport DropDownInput, {\n  EMPTY_DROPDOWN_ITEM,\n  DropdownItem,\n} from \"./common/DropDownInput\";\nimport Input from \"./common/Input\";\nimport ThemeToggle from \"./common/ThemeToggle\";\n\ntype DropdownItemName = 'colorField' | 'sizeField' | 'nameField';\n\nconst SettingsOverlayModule: React.FC = () => {\n  const [open, setOpen] = useState<boolean>(false);\n\n  return (\n    <>\n      <BlankButton\n        onClick={() => setOpen(o => !o)}\n        title={open ? \"close\" : \"open\"}\n        className={styles.button}\n      >\n        <SettinsIcon />\n      </BlankButton>\n      <div className={classNames(styles.settingsContainer, open && styles.opened)}>\n        <ThemeToggle />\n        <TSneParams />\n        <StyleParams />\n      </div>\n    </>\n\n  );\n}\n\nconst StyleParams: React.FC = () => {\n  const { preprocessedDfColumns, styleSettings, setStyleSettings } = usePlotContext();\n\n  const [dropdownItems, setDropdownItems] = useState<DropdownItem[]>(\n    [EMPTY_DROPDOWN_ITEM],\n  );\n\n  useEffect(() => {\n    if (!preprocessedDfColumns || !preprocessedDfColumns.length) {\n      return;\n    }\n\n    setDropdownItems(\n      preprocessedDfColumns.map((dfKey: string) => ({ key: dfKey })),\n    );\n  }, [preprocessedDfColumns]);\n\n  const getChosenValue = (item: DropdownItem): string => {\n    return item === EMPTY_DROPDOWN_ITEM ? EMPTY_DROPDOWN_ITEM.key : item.key;\n  }\n\n  const handleOnChangeColorField = useCallback((item: DropdownItem) => {\n    setStyleSettings({ ...styleSettings, colorField: getChosenValue(item) });\n  }, [styleSettings]);\n  const handleOnChangeSizeField = useCallback((item: DropdownItem) => {\n    setStyleSettings({ ...styleSettings, sizeField: getChosenValue(item) });\n  }, [styleSettings]);\n  const handleOnChangeNameField = useCallback((item: DropdownItem) => {\n    setStyleSettings({ ...styleSettings, nameField: getChosenValue(item) });\n  }, [styleSettings]);\n  const handleOnChangeOpacity = useCallback((newOpacity: number) => {\n    setStyleSettings({ ...styleSettings, opacity: newOpacity });\n  }, [styleSettings]);\n\n  return (\n    <>\n      <div className={styles.filterTitle}>\n        Styling parameters\n      </div>\n      <div className={styles.paramsGrid}>\n        <div className={styles.paramTitle}>Color Field</div>\n        <DropDownInput\n          itemsList={dropdownItems}\n          selected={styleSettings.colorField\n            ? { key: styleSettings.colorField }\n            : EMPTY_DROPDOWN_ITEM\n          }\n          onChange={handleOnChangeColorField}\n          label=\"Color Field\"\n          error=\"\"\n        />\n        <div className={styles.paramTitle}>Size Field</div>\n        <DropDownInput\n          itemsList={dropdownItems}\n          selected={styleSettings.sizeField\n            ? { key: styleSettings.sizeField }\n            : EMPTY_DROPDOWN_ITEM\n          }\n          onChange={handleOnChangeSizeField}\n          label=\"Size Field\"\n          error=\"\"\n        />\n        <div className={styles.paramTitle}>Opacity</div>\n        <Slider\n          defaultValue={1}\n          max={1}\n          min={0.01}\n          value={styleSettings.opacity ?? 1}\n          onChange={handleOnChangeOpacity}\n          step={0.01}\n        />\n        {/*<div className={styles.paramTitle}>Name Field</div>*/}\n        {/*<DropDownInput*/}\n        {/*  itemsList={dropdownItems}*/}\n        {/*  selected={styleSettings.nameField*/}\n        {/*    ? { key: styleSettings.nameField } */}\n        {/*    : EMPTY_DROPDOWN_ITEM*/}\n        {/*  }*/}\n        {/*  onChange={handleOnChangeNameField}*/}\n        {/*  label=\"Name Field\"*/}\n        {/*  error=\"\"*/}\n        {/*/>*/}\n      </div>\n    </>\n  );\n}\n\nconst TSneParams: React.FC = () => {\n  const { tsneParams, setTsneParams } = usePlotContext();\n\n  const [epsilon, setEpsilon] = useState(tsneParams.epsilon);\n  const [perplexity, setPerplexity] = useState(tsneParams.perplexity);\n  const [numSteps, setNumSteps] = useState(tsneParams.numSteps);\n  const [costThreshold, setCostThreshold] = useState(tsneParams.costThreshold);\n\n  const handleOnClickRefitButton = () => {\n    setTsneParams({\n      ...tsneParams,\n      epsilon,\n      perplexity,\n      numSteps,\n      costThreshold,\n    } as ITsneParams);\n  }\n\n  return <>\n    <div className={styles.filterTitle}>\n      T-SNE parameters\n    </div>\n    <div className={styles.paramsGrid}>\n      <div className={styles.paramTitle}>Epsilon</div>\n      <Slider\n        defaultValue={50}\n        max={100}\n        min={0}\n        value={epsilon}\n        onChange={setEpsilon}\n        step={0.5}\n      />\n      <div className={styles.paramTitle}>Perplexity</div>\n      <Slider\n        defaultValue={50}\n        max={100}\n        min={0}\n        value={perplexity}\n        onChange={setPerplexity}\n      />\n      <div className={styles.paramTitle}>Steps number</div>\n      <Input value={numSteps}\n             onChange={(v) => setNumSteps(parseInt(v))}/>\n      <div className={styles.paramTitle}>Cost threshold</div>\n      <Slider\n        defaultValue={50}\n        max={100}\n        min={1}\n        value={costThreshold}\n        onChange={setCostThreshold}\n        step={0.5}\n      />\n\n      <BlankButton\n        className={styles.refitButton}\n        onClick={handleOnClickRefitButton}\n      >\n        Refit\n      </BlankButton>\n    </div>\n  </>\n}\nexport default SettingsOverlayModule;\n","import React from \"react\";\nimport ScatterPlot from \"../../scatterPlot/ScatterPlot\";\nimport Layout from \"../Layout\";\nimport SettingsOverlayModule from \"../SettingsOverlayModule\";\n\nconst TsneGraphView: React.FC = () => {\n\treturn (\n\t\t<Layout>\n\t\t\t<ScatterPlot />\n\t\t\t<SettingsOverlayModule />\n\t\t</Layout>\n\t);\n}\n\nexport default TsneGraphView;\n","import React, { ChangeEvent, useEffect } from \"react\";\nimport { usePlotContext } from \"../../contexts/PlotContext\";\nimport Layout from \"../Layout\";\nimport styles from \"./UploadCsvPage.module.scss\";\nimport Slider from \"../common/Slider\";\n\nconst UploadCsvPage: React.FC = () => {\n\tlet fileInputRef: HTMLInputElement | null = null;\n\n\tconst { setCsvFile } = usePlotContext();\n\n\tconst handleFiles = (e: ChangeEvent<HTMLInputElement>) => {\n\t\tif (e.target.files) {\n\t\t\tsetCsvFile(e.target.files[0]);\n\t\t}\n\t}\n\n\treturn (\n\t\t<Layout>\n\t\t\t<div className={styles.container}>\n\t\t\t\t<input\n\t\t\t\t\tref={(ref) => (fileInputRef = ref)}\n\t\t\t\t\ttype=\"file\"\n\t\t\t\t\thidden\n\t\t\t\t\taccept=\".csv\"\n\t\t\t\t\tonChange={handleFiles}\n\t\t\t\t/>\n\t\t\t\t<button\n\t\t\t\t\tclassName={styles.csvButton}\n\t\t\t\t\tonClick={() => fileInputRef?.click()}\n\t\t\t\t>\n\t\t\t\t\tUpload CSV\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</Layout>\n\t);\n}\n\nexport default UploadCsvPage;\n","import * as React from \"react\";\nimport {useEffect} from \"react\";\nimport {Route, Routes, useNavigate, useLocation, HashRouter} from \"react-router-dom\";\nimport TsneGraphView from \"./TsneGraphView\";\nimport UploadCsvPage from \"./UploadCsvPage\";\nimport {PreprocessingStatus, usePlotContext} from \"../../contexts/PlotContext\";\n\nexport const UPLOAD_CSV = \"upload_csv\";\nexport const GRAPH_VIEW = \"graph\";\n\nexport const Router = (): React.ReactElement => {\n\treturn (\n\t\t<HashRouter>\n\t\t\t<PagePicker />\n\t\t</HashRouter>\n\t);\n};\n\nfunction PagePicker() {\n\tconst {preprocessingState} = usePlotContext();\n\tconst navigate = useNavigate();\n\tconst location = useLocation();\n\n\tuseEffect(() => {\n\t\tif (preprocessingState.status === PreprocessingStatus.COMPLETED) {\n\t\t\tnavigate(GRAPH_VIEW);\n\t\t} else if (location.pathname.includes(GRAPH_VIEW)) {\n\t\t\tnavigate('/');\n\t\t}\n\t}, [preprocessingState]);\n\treturn (\n\t\t<Routes>\n\t\t\t<Route path={GRAPH_VIEW + \"/*\"} element={<TsneGraphView />} />\n\t\t\t<Route path=\"/\" element={<UploadCsvPage />} />\n\t\t</Routes>\n\t);\n}\n","import React, {useEffect} from 'react';\nimport './App.css';\nimport {Router} from \"./components/pages/Router\";\nimport PlotContextContainer from \"./contexts/PlotContext\";\nimport {updateColorTheme} from \"./helpers/themeHelper\";\n\nfunction App() {\n    useEffect(() => {\n        updateColorTheme();\n    }, []);\n  return (\n    <div className=\"App\">\n      <PlotContextContainer>\n        <Router />\n      </PlotContextContainer>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"BlankButton_button__SL-sV\",\"disabled\":\"BlankButton_disabled__3W6ak\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"slider\":\"Slider_slider__3P0Id\",\"track\":\"Slider_track__3IJP5\",\"thumb\":\"Slider_thumb__160Qs\"};"],"sourceRoot":""}